[{"title":"关于异步的那些事儿之Async.js","date":"2018-04-02T15:35:43.000Z","path":"2018/04/02/async介绍和源码解析/","content":"<h3 id=\"关于异步\"><a href=\"#关于异步\" class=\"headerlink\" title=\"关于异步\"></a>关于异步</h3><p>异步事件驱动使得单线程的JavaScript得以在不阻塞UI的情况下执行网络、文件访问功能，<br>且使之在后端实现了较高的性能。然而异步风格也引来了一些麻烦，其中比较核心的问题是：</p>\n<ul>\n<li>函数嵌套过深<br><br>JavaScript的异步调用基于回调函数，当多个异步事务多级依赖时，回调函数会形成多级的嵌套，代码变成金字塔型结构。这不仅使得代码变难看难懂，更使得调试、重构的过程充满风险。</li>\n</ul>\n<ul>\n<li>异常处理<br><br>回调嵌套不仅仅是使代码变得杂乱，也使得错误处理更复杂。<br><br>异步编程中可能抛出错误的情况有两种：<br></li>\n</ul>\n<ol>\n<li>异步函数错误<br><br>由于异步函数是立刻返回的，异步事务中发生的错误是无法通过try-catch来捕捉的，只能采用由调用方提供错误处理回调的方案来解决。</li>\n<li>回调函数错误<br><br>由于回调函数执行时，异步函数的上下文已经不存在了，通过try-catch无法捕捉回调函数内的错误。<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3></li>\n</ol>\n<ul>\n<li>Promise方案</li>\n<li>Generator方案</li>\n<li>ES7的async/await</li>\n<li>Async.js<a id=\"more\"></a>\n<h4 id=\"项目运用中\"><a href=\"#项目运用中\" class=\"headerlink\" title=\"项目运用中\"></a>项目运用中</h4>最近做了一个整理导航的需求，顺便整理了一堆导航的文件，在改的时候，发现有一个Async的运用，一直好奇，这次想大致介绍一下这个库的运用。<br>在项目中的运用：<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fo5w8nvp5dj216e0wmkhm.jpg\" alt=\"\"><br>从图中我看到了基本的waterfall这个api的调用，我搜索了旺店交易pc代码，发现有很多地方调用。<br>### <h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3>Async是一个实用程序模块，它为异步JavaScript提供了直接，强大的功能。提供以下几种使用方式</li>\n<li>在浏览器中直接运用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用npm安装</div><div class=\"line\">$ npm install --save <span class=\"keyword\">async</span></div><div class=\"line\"></div><div class=\"line\">使用bower安装</div><div class=\"line\">$ bower install <span class=\"keyword\">async</span></div><div class=\"line\"></div><div class=\"line\">使用<span class=\"built_in\">require</span>（）</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">async</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"async\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> waterfall = <span class=\"built_in\">require</span>(<span class=\"string\">\"async/waterfall\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">require</span>(<span class=\"string\">\"async/map\"</span>);<span class=\"comment\">//或者只要其中个别方法</span></div><div class=\"line\"></div><div class=\"line\">在浏览器中直接使用</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"async.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">async</span>.map(data, asyncProcess, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</div><div class=\"line\">        alert(results);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">ES模块</div><div class=\"line\">$ npm install --save <span class=\"keyword\">async</span>-es</div><div class=\"line\"><span class=\"keyword\">import</span> waterfall <span class=\"keyword\">from</span> <span class=\"string\">'async-es/waterfall'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">async</span> <span class=\"keyword\">from</span> <span class=\"string\">'async-es'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后是直接在项目中放置文件，我们的旺店交易pc之中就是这么做的<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fo5xdi9yogj20cc0a4tai.jpg\" alt=\"\"><br>支持各种方式的源码</p>\n<ul>\n<li>nodejs中的require语法</li>\n<li>RequireJs的导入方式</li>\n<li>html中script标签的导入方式<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">   <span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// AMD / RequireJS</span></div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">   define([], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">async</span>;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// included directly via &lt;script&gt; tag</span></div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">   root.async = <span class=\"keyword\">async</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Async-js-实践\"><a href=\"#Async-js-实践\" class=\"headerlink\" title=\"Async.js  实践\"></a>Async.js  实践</h3><p>情景假设：需要三个前后依赖的异步操作。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">asyncOpA(a, b, (err, result) =&gt; &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\thandleErrorA(err);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tasyncOpB(c, result, (err, result) =&gt; &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\thandleErrorB(err);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tasyncOpB(d, result, (err, result) =&gt; &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\thandlerErrorC(err);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tfinalOp(result);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果换成async.js就会变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.waterfall([</div><div class=\"line\">\t<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\tasyncOpA(a, b, (err, result) =&gt; &#123;</div><div class=\"line\">\t\t\tcb(err, c, result);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t(c, lastResult, cb) =&gt; &#123;</div><div class=\"line\">\t\tasyncOpB(c, lastResult, (err, result) =&gt; &#123;</div><div class=\"line\">\t\t\tcb(err, d, result);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t(d, lastResult, cb) =&gt; &#123;</div><div class=\"line\">\t\tasyncOpC(d, lastResult, (err, result) =&gt; &#123;</div><div class=\"line\">\t\t\tcb(err, result);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">], (err, finalResult) =&gt; &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\thandlerError(err);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfinalOp(finalResult);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>对比着两个我们可以可以看到，回调函数由原来的横向发展转变为纵向发展，同时错误被统一传递到最后的处理函数中。<br>其原理是，将函数数组中的后一个函数包装后作为前一个函数的末参数cb传入，同时要求：</p>\n<ul>\n<li>每一个函数都应当执行其cb参数;</li>\n<li>cb的第一个参数用来传递错误。</li>\n</ul>\n<h3 id=\"async库的其他api\"><a href=\"#async库的其他api\" class=\"headerlink\" title=\"async库的其他api\"></a>async库的其他api</h3><p>1.series(tasks, [callback]) <br> 顺序执行数组、集合内的函数，当前面一个函数执行完成就会立即执行下一个函数，如果函数触发了错误，可以在callback函数中验证，否则会一直执行完成tasks<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.series([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>)</span>&#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.parallel(tasks, [callback])　　并行执行数组、集合内的方法，不用等到前一个函数执行完再执行下一个函数，如果函数触发了错误，可以在callback函数中验证<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.parallel([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">200</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">100</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// optional callback</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// the results array will equal ['one','two'] even though</span></div><div class=\"line\">    <span class=\"comment\">// the second function had a shorter timeout.</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// an example using an object instead of an array</span></div><div class=\"line\"><span class=\"keyword\">async</span>.parallel(&#123;</div><div class=\"line\">    <span class=\"attr\">one</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">200</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">two</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">100</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// results is now equals to: &#123;one: 1, two: 2&#125;</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3.waterfall(tasks, [callback])　　tasks依次运行,前一个函数的回调会作为后一个函数的参数，如果有任何任务通过一个错误的回调，下一个函数不执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.waterfall([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2, callback</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">// arg1 now equals 'one' and arg2 now equals 'two'</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'three'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, callback</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// arg1 now equals 'three'</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// result now equals 'done'    </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们可以自己写一个async.waterfall的实现：<br>实现思路</p>\n<ul>\n<li>可以按照Array给定的顺序逐个执行</li>\n<li>所有函数执行完毕后，调用指定的回调函数</li>\n<li>前一个函数的输出作为后一个函数的输入</li>\n<li>中途某一个函数执行失败，直接调用回调函数结束<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">async</span> = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">async</span>.waterfall = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tasks, cb</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 指向下一个将要执行的函数,因为要顺序执行，所以这个下标来区分数组</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//调用执行的函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_run</span>(<span class=\"params\">index, args, cb</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> task = tasks[index];</div><div class=\"line\">        args.push(cb);</div><div class=\"line\">        task.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"comment\">//我们调用函数时，cb作为参数，当cb执行完之后，我们需要去执行下一个函数，cb就是控制流</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_cb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 如果错误了，直接回调最外层的cb</span></div><div class=\"line\">        <span class=\"comment\">// 如果是最后一个，也直接调用最外层的cb</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] || _index === tasks.length) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cb &amp;&amp; cb.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 取出回调参数，作为下一个函数的输入</span></div><div class=\"line\">        <span class=\"comment\">// 因为回调的第一个参数是错误码，所以要去掉第一个</span></div><div class=\"line\">        <span class=\"comment\">// var rest = arguments.slice(1); //arguments并没有slice方法，因此这样会报错</span></div><div class=\"line\">        <span class=\"keyword\">var</span> rest = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        _run(_index++, rest, _cb);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 如果用户没有指定要串行执行的函数，则直接调用回调</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (tasks.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> cb &amp;&amp; cb();</div><div class=\"line\">    _run(_index++, [], _cb);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面是源码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, callback</span>) </span>&#123;</div><div class=\"line\">    callback = once(callback || noop);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isArray(tasks)) <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'First argument to waterfall must be an array of functions'</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (!tasks.length) <span class=\"keyword\">return</span> callback();</div><div class=\"line\">    <span class=\"keyword\">var</span> taskIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTask</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> task = wrapAsync(tasks[taskIndex++]);</div><div class=\"line\">        args.push(onlyOnce(next));</div><div class=\"line\">        task.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">err<span class=\"regexp\">/*, ...args*/</span></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err || taskIndex === tasks.length) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> callback.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        nextTask(slice(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    nextTask([]);</div></pre></td></tr></table></figure></p>\n<p>源码实现了一种迭代器的方式去管理传入的函数数组，非常优雅，支持next特性.<br>有了迭代器，还需要一个调度器才能按照预期的流程串行执行需要的函数，同时处理参数传递的过程。<br><br>回到调度器的环境里，在参数传递的过程中，args是上一个函数的返回结果组成的数组，再把下一个迭代器包装一下作为该数组的最后一个元素。这样在调用当前迭代器对应的函数的时候，用户态上下文中的callback就是下一个用户态函数对应的迭代器了。整个控制流程完全处在用户层，框架层所做的事仅仅是参数结构的转换(毕竟apply函数需要的参数结构是数组，而函数调用的时候则是展开的形式)。</p>\n<p>Async.js的问题是：</p>\n<p>在外在上依然没有摆脱回调函数，只是将其从横向发展变为纵向，还是需要程序员熟练异步回调风格。</p>\n<p>错误处理上仍然没有利用上try-catch和throw，依赖于“回调函数的第一个参数用来传递错误”这样的一个约定。</p>\n","excerpt":"关于异步异步事件驱动使得单线程的JavaScript得以在不阻塞UI的情况下执行网络、文件访问功能，且使之在后端实现了较高的性能。然而异步风格也引来了一些麻烦，其中比较核心的问题是： 函数嵌套过深JavaScript的异步调用基于回调函数，当多个异步事务多级依赖时，回调函数会形成多级的嵌套，代码变成金字塔型结构。这不仅使得代码变难看难懂，更使得调试、重构的过程充满风险。 异常处理回调嵌套不仅仅是使代码变得杂乱，也使得错误处理更复杂。异步编程中可能抛出错误的情况有两种： 异步函数错误由于异步函数是立刻返回的，异步事务中发生的错误是无法通过try-catch来捕捉的，只能采用由调用方提供错误处理回调的方案来解决。 回调函数错误由于回调函数执行时，异步函数的上下文已经不存在了，通过try-catch无法捕捉回调函数内的错误。解决方案 Promise方案 Generator方案 ES7的async/await Async.js","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"Redux 分享一","date":"2018-03-06T15:35:43.000Z","path":"2018/03/06/Redux分享/","content":"<h3 id=\"很多时候，大家都知道，用过React，但是对Redux只是听说过而已，首先有react没有涉及的两个方面\"><a href=\"#很多时候，大家都知道，用过React，但是对Redux只是听说过而已，首先有react没有涉及的两个方面\" class=\"headerlink\" title=\"很多时候，大家都知道，用过React，但是对Redux只是听说过而已，首先有react没有涉及的两个方面\"></a>很多时候，大家都知道，用过React，但是对Redux只是听说过而已，首先有react没有涉及的两个方面</h3><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"ruby\"> 代码结构</span></div><div class=\"line\">-<span class=\"ruby\"> 组件之间的通信</span></div></pre></td></tr></table></figure>\n<p>对于大型的复杂应用来说，这两方面恰恰是最关键的。因此，只用 react没法写大型应用，从而redux应运而生。在很多场景下，其实你并不需要用到redux，所以我们大多数情况下不了解他，那么什么情况下我们才需要用到redux？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 用户的使用方式复杂</div><div class=\"line\">- 不同身份的用户有不同的使用方式（比如普通用户和管理员）</div><div class=\"line\">- 多个用户之间可以协作</div><div class=\"line\">- 与服务器大量交互，或者使用了WebSocket</div><div class=\"line\">- View要从多个来源获取数据</div></pre></td></tr></table></figure></p>\n<p>把这段话翻译一下，从组件角度考虑问题<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 某个组件的状态，需要共享</div><div class=\"line\">- 某个状态需要在任何地方都可以拿到</div><div class=\"line\">- 一个组件需要改变全局状态</div><div class=\"line\">- 一个组件需要改变另一个组件的状态</div></pre></td></tr></table></figure></p>\n<p>是不是很厉害的样子，炸一听，我其实理解不了，那么我们记住redux的设计核心<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- Web 应用是一个状态机，视图与状态是一一对应的。</div><div class=\"line\">- 所有的状态，保存在一个对象里面。</div></pre></td></tr></table></figure></p>\n<h2 id=\"理解redux必须了解的三个store，state，action，reducer等。\"><a href=\"#理解redux必须了解的三个store，state，action，reducer等。\" class=\"headerlink\" title=\"理解redux必须了解的三个store，state，action，reducer等。\"></a>理解redux必须了解的三个store，state，action，reducer等。</h2><ul>\n<li>Store<br><br>保存数据的地方，整个应用只有一个store<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>在redux之中，提供<b>createStore</b>来生成store。</p>\n<ul>\n<li>State<br><br>包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;creatStore&#125; form <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> store = creatStore(fn);</div><div class=\"line\"><span class=\"keyword\">const</span> state = store.getState(); <span class=\"comment\">//获取当前的state</span></div><div class=\"line\"><span class=\"comment\">//一个state一个view，state相同，view也相同，这个对于学习过react的理解没什么问题</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ps:那么如何利用store改变state？</p>\n<ul>\n<li>Action <br><br>action就是view发出通知，让state发生改变，action本身是一个js对象，其中有一个<b>type</b> 是必须的属性。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> action = &#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'ADD_TODO'</span>, <span class=\"comment\">//名称</span></div><div class=\"line\">  payload: <span class=\"string\">'Learn Redux'</span> <span class=\"comment\">//携带的信息</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以这样理解，Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。</p>\n<ul>\n<li><p>Action Creator<br>我的理解是批量生产action</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'添加 TODO'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: ADD_TODO,</div><div class=\"line\">    text</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> action = addTodo(<span class=\"string\">'Learn Redux'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>store.dispatch(); <br><br>是 View 发出 Action 的唯一方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(fn);</div><div class=\"line\"><span class=\"keyword\">const</span> action = &#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'ADD_TODO'</span>,</div><div class=\"line\">  <span class=\"attr\">payload</span>: <span class=\"string\">'Learn Redux'</span></div><div class=\"line\">&#125;</div><div class=\"line\">store.dispatch(action);</div><div class=\"line\"><span class=\"comment\">//store.dispatch(addTodo('Learn Redux'));</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ps:store接受到指令action会发生什么？<br>store需要给出一个新的state，那么Reducer就是这个store接到指令出来state的一个过程。</p>\n<ul>\n<li>Reducer<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Reducer =<span class=\"function\">(<span class=\"params\">state,action</span>)=&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> newstate</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//根据上面我们可以写的例子</span></div><div class=\"line\"><span class=\"keyword\">const</span> defaultState = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state = defaultState, action</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'ADD'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state + action.payload;</div><div class=\"line\">    <span class=\"keyword\">default</span>: </div><div class=\"line\">      <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> state = reducer(<span class=\"number\">1</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'ADD'</span>,</div><div class=\"line\">  <span class=\"attr\">payload</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上是为了可以理解而写的例子，一般情况下, 代码会写成这个样子／<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</div><div class=\"line\"><span class=\"comment\">//createStore会接受reducer这个函数，等到store.dispatch的时候自动去调用</span></div></pre></td></tr></table></figure></p>\n<p> 在actions中有三个action，分别是加0，1，2。因为数组通过reduce可以直接的到结果。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> actions = [</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'ADD'</span>, <span class=\"attr\">payload</span>: <span class=\"number\">0</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'ADD'</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'ADD'</span>, <span class=\"attr\">payload</span>: <span class=\"number\">2</span> &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">const</span> total = actions.reduce(reducer, <span class=\"number\">0</span>); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<p>reducer最重要的是一个函数，一个纯函数，同样的输入，同样的输出。<br>这里我们可以提一下函数式编程？<br>什么是函数式编程，需要遵循的特点:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 不得改写参数</div><div class=\"line\">- 不能调用系统 I/O 的API</div><div class=\"line\">- 不能调用<span class=\"built_in\">Date</span>.now()或者<span class=\"built_in\">Math</span>.random()等不纯的方法，因为每次会得到不一样的结果</div></pre></td></tr></table></figure></p>\n<p>根据同样的输入，同样的输出，那么就可以保证我们之前的前提：同样的state就是同样的view，那么问题来了，我们需要在不同场景下的state不同，而不是就光去改变state本身。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...state, newItem];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>store.subscribe() <br><br>设置监听函数，一旦 State 发生变化，就自动执行这个函数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer);</div><div class=\"line\">store.subscribe(listener);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"store的总结\"><a href=\"#store的总结\" class=\"headerlink\" title=\"store的总结\"></a>store的总结</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- store.getState() <span class=\"comment\">//获取state</span></div><div class=\"line\">- store.dispatch() <span class=\"comment\">//发出action指令去获取新的state</span></div><div class=\"line\">- store.subscribe() <span class=\"comment\">//state发生改变后执行的函数</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(todoApp, <span class=\"built_in\">window</span>.STATE_FROM_SERVER)</div></pre></td></tr></table></figure>\n<p>应用给出的初始值，会覆盖 Reducer 函数的默认初始值。</p>\n<h3 id=\"Reducer-的拆分\"><a href=\"#Reducer-的拆分\" class=\"headerlink\" title=\"Reducer 的拆分\"></a>Reducer 的拆分</h3><p>讲到这里应该还记得reducer函数是做什么吧？<br><br>Reducer就是这个store接到指令出来state的一个过程。<br>随着业务越来越复杂， 我们的 state只有一个，但是state 的数据应该是越来越多，我们如何对Reducer做拆分？<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chatReducer = <span class=\"function\">(<span class=\"params\">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; type, payload &#125; = action;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> ADD_CHAT:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class=\"line\">        <span class=\"attr\">chatLog</span>: state.chatLog.concat(payload)</div><div class=\"line\">      &#125;);</div><div class=\"line\">    <span class=\"keyword\">case</span> CHANGE_STATUS:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class=\"line\">        <span class=\"attr\">statusMessage</span>: payload</div><div class=\"line\">      &#125;);</div><div class=\"line\">    <span class=\"keyword\">case</span> CHANGE_USERNAME:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class=\"line\">        <span class=\"attr\">userName</span>: payload</div><div class=\"line\">      &#125;);</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>拆分以后的样子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chatReducer = <span class=\"function\">(<span class=\"params\">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">chatLog</span>: chatLog(state.chatLog, action),</div><div class=\"line\">    <span class=\"attr\">statusMessage</span>: statusMessage(state.statusMessage, action),</div><div class=\"line\">    <span class=\"attr\">userName</span>: userName(state.userName, action)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//第二种</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> chatReducer = combineReducers(&#123;</div><div class=\"line\">  chatLog,</div><div class=\"line\">  statusMessage,</div><div class=\"line\">  userName</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> todoApp;</div></pre></td></tr></table></figure></p>\n<p> 由此，combineReducers()做的就是产生一个整体的 Reducer 函数。该函数根据 State 的 key 去执行相应的子 Reducer，并将返回结果合并成一个大的 State 对象</p>\n<p> 这里基础用法我们已经都认识完了，那么我们现在来画一下redux的工作流？（现场画）。</p>\n<h2 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h2><p>严格的单向数据流是 Redux 架构的设计核心。无论是什么框架，都有生命周期的概念，redux会遵循相同的生命周期。redux的生命周期可以分为4个步骤,。</p>\n<ul>\n<li>调用 store.dispatch(action)。<br><br>action就是描述发生了什么的对象，<br>你可以在任何地方调用 store.dispatch(action)，包括组件中、XHR 回调中、甚至定时器中。</li>\n<li>Redux store 调用传入的 reducer 函数。<br><br>Store 会把两个参数传入 reducer： 当前的 state 树和 action。例如，在这个 todo 应用中，根 reducer 可能接收这样的数据：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">let</span> previousState = &#123;</div><div class=\"line\">  <span class=\"attr\">visibleTodoFilter</span>: <span class=\"string\">'SHOW_ALL'</span>,</div><div class=\"line\">  <span class=\"attr\">todos</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'Read the docs.'</span>,</div><div class=\"line\">      <span class=\"attr\">complete</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 将要执行的 action（添加一个 todo）</span></div><div class=\"line\"><span class=\"keyword\">let</span> action = &#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'ADD_TODO'</span>,</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">'Understand the flow.'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// reducer 返回处理后的应用状态</span></div><div class=\"line\"><span class=\"keyword\">let</span> nextState = todoApp(previousState, action);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数结果应该是可以与测试，因为是纯函数，不要有副作用操作。</p>\n<ul>\n<li>根 reducer 应该把多个子 reducer 输出合并成一个单一的 state 树。<br>根 reducer 的结构完全由你决定。Redux 原生提供combineReducers()辅助函数，来把根 reducer 拆分成多个函数，用于分别处理 state 树的一个分支。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todos</span>(<span class=\"params\">state = [], action</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 省略处理逻辑...</span></div><div class=\"line\">   <span class=\"keyword\">return</span> nextState;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visibleTodoFilter</span>(<span class=\"params\">state = <span class=\"string\">'SHOW_ALL'</span>, action</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 省略处理逻辑...</span></div><div class=\"line\">   <span class=\"keyword\">return</span> nextState;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">let</span> todoApp = combineReducers(&#123;</div><div class=\"line\">   todos,</div><div class=\"line\">   visibleTodoFilter</div><div class=\"line\"> &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当你触发 action 后，combineReducers 返回的 todoApp 会负责调用两个 reducer：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> nextTodos = todos(state.todos, action);</div><div class=\"line\"><span class=\"keyword\">let</span> nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action);</div></pre></td></tr></table></figure></p>\n<p>然后会把两个结果集合并成一个 state 树：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> &#123;</div><div class=\"line\">  <span class=\"attr\">todos</span>: nextTodos,</div><div class=\"line\">  <span class=\"attr\">visibleTodoFilter</span>: nextVisibleTodoFilter</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>虽然 combineReducers() 是一个很方便的辅助工具，你也可以选择不用；你可以自行实现自己的根 reducer！</p>\n<ul>\n<li>Redux store 保存了根 reducer 返回的完整 state 树。<br>这个新的树就是应用的下一个 state！所有订阅 store.subscribe(listener) 的监听器都将被调用；监听器里可以调用 store.getState() 获得当前 state。</li>\n</ul>\n<p>现在，可以应用新的 state 来更新 UI。如果你使用了 React Redux 这类的绑定库，这时就应该调用 component.setState(newState) 来更新。</p>\n","excerpt":"很多时候，大家都知道，用过React，但是对Redux只是听说过而已，首先有react没有涉及的两个方面12- 代码结构- 组件之间的通信 对于大型的复杂应用来说，这两方面恰恰是最关键的。因此，只用 react没法写大型应用，从而redux应运而生。在很多场景下，其实你并不需要用到redux，所以我们大多数情况下不了解他，那么什么情况下我们才需要用到redux？12345- 用户的使用方式复杂- 不同身份的用户有不同的使用方式（比如普通用户和管理员）- 多个用户之间可以协作- 与服务器大量交互，或者使用了WebSocket- View要从多个来源获取数据 把这段话翻译一下，从组件角度考虑问题1234- 某个组件的状态，需要共享- 某个状态需要在任何地方都可以拿到- 一个组件需要改变全局状态- 一个组件需要改变另一个组件的状态 是不是很厉害的样子，炸一听，我其实理解不了，那么我们记住redux的设计核心12- Web 应用是一个状态机，视图与状态是一一对应的。- 所有的状态，保存在一个对象里面。 理解redux必须了解的三个store，state，action，reducer等。 Store保存数据的地方，整个应用只有一个store12import &#123; createStore &#125; from 'redux';const store = createStore(fn);","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"关于继承","date":"2018-01-09T15:35:43.000Z","path":"2018/01/09/关于继承/","content":"<p>这是组内分享的时候根据高程学习的一个分享文档，自己做的一个记录，继承的上部分是介绍原型的，当时是用了一个脑图来讲，这里就只放继承这块。<br>oo语言支持两种继承方式：接口继承和实现继承<br>接口继承只继承方法签名；<br>实现继承 =&gt;继承实际的办法.<br>由于函数中没有签名，在ECMAScript中无法实现接口继承，所以ECMAScript只支持依靠原型链的实现继承。</p>\n<h4 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h4><p>原型链作为实现继承的主要办法的基本思想是：利用原型链让一个引用类型继承另一个引用类型的属性和办法。</p>\n<ul>\n<li><p>回顾 原型，构造函数，实例的关系<br> 每个构造函数都有一个原型对象，原型对象包含一个指向构造函数的指针，而实例包含了一个指向原型对象的内部指针。。<br><br>如图所示：<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fn4z46u6xxj20q20ckt8z.jpg\" alt=\"\"></p>\n<ul>\n<li><p>实现原型链<br> 原理：原型对象等于另一个类型的实例，原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中包含着一个指向另一个构造函数的指针。加入另一个原型又是另一个类型的实例，那么上述关系依旧成立。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">A.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.subproperty = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//继承关键</span></div><div class=\"line\">B.prototype = <span class=\"keyword\">new</span> A();</div><div class=\"line\">B.prototype.getValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subproperty;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> C= <span class=\"keyword\">new</span> B();</div><div class=\"line\">C.getSuperValue（）</div></pre></td></tr></table></figure>\n<p>如图所示<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fn4zn42w2zj21140cswew.jpg\" alt=\"\"><br>代码解读 <br> 定义了A和B类型,各自有一个属性和方法，区别是B继承了A，而继承是通过创建A的实例。<br>没有使用B的默认原型，把他的新原型换成了A的实例， 所以B的原型拥有了A的实例拥有的全部属性和方法，也有了一个指向A的指针。所以上述的代码里面，C指向B的原型，而B的原型又指向A。getSuperValue()方法在A.prototype的原型中.因为property是一个实例属性，getSuperValue是原型方法，现在B.peototype是A的实例，property当然位于实例中。<br>搜寻机制： 搜查实例 -&gt;搜索B的原型-&gt;搜索A的原型</p>\n</li>\n</ul>\n</li>\n<li><p>别忘记默认的原型 <br><br>所有引用类型继承了Object, 所有函数的默认原型都是object的实例，因此默认原型都会包含一个内部指针，指向object.prototype <br><br>结合上面的就是B继承了A，A继承了object。所以C在调用c.toString()时，实际上调用了保存在object.prototype中的那个方法</p>\n</li>\n<li>确定原型和实例的关系<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>  <span class=\"comment\">//true</span></div><div class=\"line\">C <span class=\"keyword\">instanceof</span> B  <span class=\"comment\">//true</span></div><div class=\"line\">C <span class=\"keyword\">instanceof</span> A <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.prototype.isPrototypeOf(C)</div><div class=\"line\">B.prototype.isPrototypeOf(C)</div><div class=\"line\">C.prototype.isPrototypeOf(C)</div></pre></td></tr></table></figure>\n<ul>\n<li>谨慎定义方法<br>子类型需要覆盖超类型中的某个方法，或者添加某个方法， 但是原型添加办法的代码一定要放在替换原型的语句之后<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.property = <span class=\"literal\">true</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> A.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.property;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.subproperty = <span class=\"literal\">false</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">//继承关键</span></div><div class=\"line\"> B.prototype = <span class=\"keyword\">new</span> A();</div><div class=\"line\"> <span class=\"comment\">//新加方法</span></div><div class=\"line\"> B.prototype.getnewfunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">//重写了超类型中的方法</span></div><div class=\"line\"> B.prototype.getSuperValue = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"> &#125;<span class=\"comment\">//   只有b调用了才会改变方法，a方法不可以</span></div><div class=\"line\"> <span class=\"keyword\">var</span> C= <span class=\"keyword\">new</span> B();</div><div class=\"line\"> C.getSuperValue（）<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意改写方法的时候不要用字面量改写方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">B.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">getSuperValue</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">  &#125;<span class=\"comment\">// </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的写法会切换与A和B的联系</p>\n<ul>\n<li>原型链的问题 <br><br>1.包含引用类型值的原型实行会被所有实例共享，在通过原型实现继承时，原型实际上会变成另一个类型的实例。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function superType()&#123;</div><div class=\"line\">  this.color = ['red','green];</div><div class=\"line\">&#125;</div><div class=\"line\">function subType()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">subType.prototype = new superType();</div><div class=\"line\">var instance1 = new subType();</div><div class=\"line\">instance1.color.push(\"black\");</div><div class=\"line\">alert(instance1.color) //red,blue,green,black</div><div class=\"line\">var instance2 = new subType();</div><div class=\"line\">alert(instance2.color) //red,blue,green,black</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2.创建子类型的实例时，不能像超类型的构造函数中传递参数</p>\n<h4 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h4><p>为了解决上文说的问题，有一种办法叫借用构造函数–即在子类型构造函数的内部调用超类型构造函数<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function superType()&#123;</div><div class=\"line\">  this.color = ['red','green];</div><div class=\"line\">&#125;</div><div class=\"line\">function subType()&#123;</div><div class=\"line\">  superType.call(this);</div><div class=\"line\">&#125;</div><div class=\"line\">var instance1 = new subType();</div><div class=\"line\">instance1.color.push(\"black\");</div><div class=\"line\">alert(instance1.color) //red,blue,green,black</div><div class=\"line\">var instance2 = new subType();</div><div class=\"line\">alert(instance2.color) //red,blue,green</div><div class=\"line\">利用apply和call在新创建的subtype实例环境调用了supertype构造函数，这样子，就会在新的subtype对象上执行supertype函数中定义了所有对象初始化代码。每个subtype就会有自己的colors的属性副本了。</div></pre></td></tr></table></figure></p>\n<p>1.传递参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">color</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = color</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  superType.call(<span class=\"keyword\">this</span>,<span class=\"string\">'red'</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">29</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> instance  = <span class=\"keyword\">new</span> subType();</div><div class=\"line\">alert(intance.color) <span class=\"comment\">//'red'</span></div><div class=\"line\">alert(intane.age) <span class=\"comment\">//29</span></div></pre></td></tr></table></figure></p>\n<p>2.构造函数问题<br>方法都在构造函数中定义，因此函数复用无法谈起。在超类型的原型中定义方法，对于子类型而言不可见，结果所有类型都只是使用构造函数模式。</p>\n<h4 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h4><p>将原型链和借用构造函数组合一起、实现思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现实例属性的继承。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">superType</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = [<span class=\"string\">'color'</span>,<span class=\"string\">'blue'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">superType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subType</span>(<span class=\"params\">name,age</span>)</span>&#123;</div><div class=\"line\">  superType.call(<span class=\"keyword\">this</span>,name);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\">subType.prototype = <span class=\"keyword\">new</span> superType();</div><div class=\"line\">subType.prototype.constructor =subType;</div><div class=\"line\">subType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> subType(<span class=\"string\">'xiaomu'</span>,<span class=\"number\">25</span>);</div><div class=\"line\">instance1.color.push(<span class=\"string\">\"black\"</span>);</div><div class=\"line\">alert(instance1.color) <span class=\"comment\">//</span></div><div class=\"line\">instance1.sayName();</div><div class=\"line\">instance1.sayAge();</div><div class=\"line\"></div><div class=\"line\">vat instance2 = <span class=\"keyword\">new</span> subType(<span class=\"string\">'wxy'</span>,<span class=\"number\">27</span>);</div><div class=\"line\">instance2.color.push(<span class=\"string\">\"black\"</span>);</div><div class=\"line\">alert(instance2.color) <span class=\"comment\">//</span></div><div class=\"line\">instance2.sayName();</div><div class=\"line\">instance2.sayAge();</div></pre></td></tr></table></figure></p>\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h4><p>思想是借住原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> （<span class=\"title\">o</span>）</span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>（）</span>&#123;&#125;</div><div class=\"line\">  F.prototype = o;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在object函数内部，创建了一个临时性的构造函数，讲传入的对象作为这个构造函数的原型，最后返回类型的新实例。本质上，object（）对传入其中的对象执行了一次浅复制<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> :<span class=\"string\">\"wxy\"</span>,</div><div class=\"line\">  <span class=\"attr\">friends</span>:[<span class=\"string\">\"kunkun\"</span>,<span class=\"string\">'nanan'</span>,<span class=\"string\">'chaoran'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"built_in\">Object</span>.create(person);</div><div class=\"line\">person1.name = <span class=\"string\">'wxy'</span>;</div><div class=\"line\">person1.friends.push(<span class=\"string\">\"jingyun\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"built_in\">Object</span>.create(person);</div><div class=\"line\">person1.name = <span class=\"string\">'xiaomu'</span>;</div><div class=\"line\">person1.friends.push(<span class=\"string\">\"caocao\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert(person.friends)</div><div class=\"line\"><span class=\"comment\">// 这种方式指定的任何属性都会覆盖原型对象上的同名属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"built_in\">Object</span>.create(person,&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">'xiaomu1'</span></div><div class=\"line\">&#125;);</div><div class=\"line\">alert(person1.name);</div></pre></td></tr></table></figure></p>\n<p>还是会存在引用类型属性共享的问题</p>\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><p>思路是即创建一个仅用于分装继承过程的函数，该函数在内部以某种方式来增强对象。最后返回对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a(name)&#123;</div><div class=\"line\">  var clone = object(name);</div><div class=\"line\">  clone.sayHi =function()&#123;</div><div class=\"line\">    alert(&apos;hi&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  return clone;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> :<span class=\"string\">\"wxy\"</span>,</div><div class=\"line\">  <span class=\"attr\">friends</span>:[<span class=\"string\">\"kunkun\"</span>,<span class=\"string\">'nanan'</span>,<span class=\"string\">'chaoran'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = a（person）</div><div class=\"line\">person1.sayHi() <span class=\"comment\">//hi</span></div></pre></td></tr></table></figure>\n<h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h4><p>组合继承是无论什么情况下，都会调用两次超类型构造函数，一次是创建子类型原型， 一次是子类型构造函数内部。<br>寄生组合式继承 解决了<br>即通过借用构造函数继承属性通过原型链的混成形继承方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType,supertype</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prototype =<span class=\"built_in\">Object</span>(supertype.prototype);</div><div class=\"line\">  subType.constructor =subType;</div><div class=\"line\">  subType.prototype = prototype;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>子类型构造函数和超类型构造函数，在函数内部，创建了超类型的原型的一个副本，接着重新添加constructor属性，最后，把新对象（副本）复制给子类型的原型<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> A（<span class=\"keyword\">name</span>）&#123;</div><div class=\"line\">  this.<span class=\"keyword\">name</span> = <span class=\"keyword\">name</span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\">A.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  alert(this.<span class=\"keyword\">name</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">functin B()&#123;</div><div class=\"line\">  A.<span class=\"keyword\">call</span>(this,<span class=\"keyword\">name</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">inheritPrototype(A,B)</div><div class=\"line\">B.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  alert(this.age);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"这是组内分享的时候根据高程学习的一个分享文档，自己做的一个记录，继承的上部分是介绍原型的，当时是用了一个脑图来讲，这里就只放继承这块。oo语言支持两种继承方式：接口继承和实现继承接口继承只继承方法签名；实现继承 =&gt;继承实际的办法.由于函数中没有签名，在ECMAScript中无法实现接口继承，所以ECMAScript只支持依靠原型链的实现继承。 原型链原型链作为实现继承的主要办法的基本思想是：利用原型链让一个引用类型继承另一个引用类型的属性和办法。 回顾 原型，构造函数，实例的关系 每个构造函数都有一个原型对象，原型对象包含一个指向构造函数的指针，而实例包含了一个指向原型对象的内部指针。。如图所示： 实现原型链 原理：原型对象等于另一个类型的实例，原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中包含着一个指向另一个构造函数的指针。加入另一个原型又是另一个类型的实例，那么上述关系依旧成立。","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"关于slice&split&slice的不同","date":"2017-10-26T14:43:43.000Z","path":"2017/10/26/关于slice&split&slice的不同/","content":"<p>今天组长去面试了一个人，吐槽了一堆，这也不会，那个也不会，其中有一道题目就是说这三个的区别，她一说，发现其实我也挺蒙的。我好像得了一种，看了什么马上忘记的病。怎么办，你们有没有药？</p>\n<h2 id=\"一、split\"><a href=\"#一、split\" class=\"headerlink\" title=\"一、split\"></a>一、split</h2><ul>\n<li>官方解释：将字符串分割为字符串数组，并返回此数组</li>\n<li><p>语法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> string.split(separator, limit);</div><div class=\"line\"> 第一个参数是分隔符，第二个是分隔次数。</div><div class=\"line\"> ~~~   </div><div class=\"line\">- example &lt;/br&gt;</div><div class=\"line\"> ~~~js</div><div class=\"line\">  var loveString = 'lzh-i-love-you';</div><div class=\"line\">  var loveText1 = loveString.split(\"-\");</div><div class=\"line\">  var loveText2 = loveString.split(\"-\",1);</div><div class=\"line\">  console.log(loveText1) //['lzh','i','love','you']</div><div class=\"line\">  console.log(loveText2) //['lzh']</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>场外话<br><br>这个在我们的业务场景中，会和join一起用，比如酱紫。<br><br>就是字符串拆成数组，数组又变成字符串<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loveText3 = loveText1.join(<span class=\"string\">''</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(loveText3)   <span class=\"comment\">// lzhiloveyou</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、splice\"><a href=\"#二、splice\" class=\"headerlink\" title=\"二、splice\"></a>二、splice</h2><ul>\n<li>官方解释：用于插入、删除或替换数组的元素。<br><br>该方法会改变<code>原始数据</code></li>\n<li><p>语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">arrayObject.splice(index,howmany,item1,.....,itemX)</div><div class=\"line\">参数一：规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。（必须）</div><div class=\"line\">参数二：要删除的项目数量。如果设置为<span class=\"number\">0</span>，则不会删除项目。(必须)</div><div class=\"line\">参数三：向数组添加的新项目）（可选）</div><div class=\"line\">最后返回：包含被删除的新数组</div></pre></td></tr></table></figure>\n</li>\n<li><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">替换元素</div><div class=\"line\"><span class=\"keyword\">var</span> exampleArray = [<span class=\"string\">'lzh'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'you'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> newExample = exampleArray.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">'xiaomu'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(exampleArray.join(<span class=\"string\">''</span>)) <span class=\"comment\">//lzhxiaomuloveyou  将‘i’删除替换成了‘xiaomu'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(newExample.join(<span class=\"string\">''</span>)) <span class=\"comment\">// i 返回了删除了以后的新数组</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">删除元素</div><div class=\"line\"><span class=\"keyword\">var</span> exampleArray = [<span class=\"string\">'lzh'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'you'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> newExample = exampleArray.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(exampleArray) <span class=\"comment\">// [\"i\", \"love\", \"you\"]</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">新加元素</div><div class=\"line\"><span class=\"keyword\">var</span> exampleArray = [<span class=\"string\">'lzh'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'you'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> newExample = exampleArray.splice(<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"string\">'forever'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(exampleArray)  <span class=\"comment\">// [\"lzh\", \"i\", \"love\", \"you\", \"forever\"]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>场外话<br><br>这个是最复杂的，增删改两个，一般情况下，主要记住，是会改变原数组的，而产生的新数组是被删除掉的数组。只要记住这个，就没啥问题，绝对灵活运用。<h2 id=\"三、slice\"><a href=\"#三、slice\" class=\"headerlink\" title=\"三、slice\"></a>三、slice</h2></li>\n<li>官方文档：可从已有的数组中返回选定的元素。不改变原来数组</li>\n<li><p>语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">arrayObject.slice(start,end)</div><div class=\"line\">参数一：从何处开始选取 (必须)</div><div class=\"line\">参数二：从何处结束选取 (可选)</div><div class=\"line\">返回值：返回一个新的数组，包含从 start 到 end（不包括该元素）的 arrayObject 中的元素。</div></pre></td></tr></table></figure>\n</li>\n<li><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exampleArray = [<span class=\"string\">'lzh'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'you'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> newExample = exampleArray.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newExample); <span class=\"comment\">// [\"i\", \"love\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(exampleArray);<span class=\"comment\">// [\"lzh\", \"i\", \"love\", \"you\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>场外话<br> 从以上例子可以看书，并不会改变原来数组的构成，是截取的部分的元素，组成一个新的数组。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>其实split，splice，slice这三个只是表面看着有点像，<br>比如split是对字符串进行处理，splice和slice是处理数组。<br>而splice是改变数组，而slice不改变原来数组。这么总结一下就很清晰了。<br></p>\n</li>\n</ul>\n<p>最近计划是一个月写一篇博客，但是好可怕，我每次复习完的东西，过段时间，我就忘记了。。。。</p>\n","excerpt":"今天组长去面试了一个人，吐槽了一堆，这也不会，那个也不会，其中有一道题目就是说这三个的区别，她一说，发现其实我也挺蒙的。我好像得了一种，看了什么马上忘记的病。怎么办，你们有没有药？ 一、split 官方解释：将字符串分割为字符串数组，并返回此数组 语法 12345678910 string.split(separator, limit); 第一个参数是分隔符，第二个是分隔次数。 ~~~ - example &lt;/br&gt; ~~~js var loveString = 'lzh-i-love-you'; var loveText1 = loveString.split(\"-\"); var loveText2 = loveString.split(\"-\",1); console.log(loveText1) //['lzh','i','love','you'] console.log(loveText2) //['lzh']","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"关于this指向二三事儿","date":"2017-09-05T02:23:43.000Z","path":"2017/09/05/关于this指向/","content":"<p></p><p style=\"text-decoration:line-through\">一般来讲，this指向是面试都会问题的题目，好吧，这些样子写博客是不是太过于功利了，那就重来。</p><br>一般来讲，this指向是js学习过程中必须掌握的知识，在实际开发中也一定会遇见的问题。那今天就结合实际来让自己加深一下原理印象。<br><p></p>\n<ul>\n<li>普通函数this指向</li>\n<li>箭头函数this指向</li>\n</ul>\n<h4 id=\"this指向谁？\"><a href=\"#this指向谁？\" class=\"headerlink\" title=\"this指向谁？\"></a>this指向谁？</h4><p>this取值是函数执行上下文的一部分，在调用函数时，会产生一个新的执行上下文，而this会指向调用者。用最常听到的话就是“ 谁调用就是指向谁”。<br><br><a id=\"more\"></a></p>\n<h5 id=\"一-默认绑定\"><a href=\"#一-默认绑定\" class=\"headerlink\" title=\"一.默认绑定\"></a>一.默认绑定<br></h5><p> 在全局环境中，this 永远指向 window。 这是最常见的一种方式。<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"二-new-绑定\"><a href=\"#二-new-绑定\" class=\"headerlink\" title=\"二.new 绑定\"></a>二.new 绑定</h5><ul>\n<li>创建一个新对象</li>\n<li>新对象会被执行[[ 原型]]连接</li>\n<li>新对象会绑定到函数调用的this</li>\n<li>如果函数没有其他返回对象，new表达式中的函数调用会自动返回新对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);   <span class=\"comment\">//Foo &#123;a:2&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.a); <span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果不用new构造函数就是和第一种情况一样this变成了window。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = a;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);   <span class=\"comment\">//window</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> foo = Foo(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo.a) <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"三-显示绑定—硬绑定\"><a href=\"#三-显示绑定—硬绑定\" class=\"headerlink\" title=\"三. 显示绑定—硬绑定\"></a>三. 显示绑定—硬绑定<br></h5><p>函数用 call、apply或者 bind 调用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</div><div class=\"line\">  <span class=\"attr\">a</span>:<span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</div><div class=\"line\">&#125;</div><div class=\"line\">foo.call(obj); <span class=\"comment\">// obj,2</span></div><div class=\"line\">foo.apply(obj);<span class=\"comment\">//obj,2</span></div><div class=\"line\">foo.bind(obj)();<span class=\"comment\">//obj,2</span></div></pre></td></tr></table></figure></p>\n<p>由结果我们可以看到，this指向的是传入的对象即obj，这时候也经常可以说到什么办法可以改变函数的this指向，用call和apply等可以做到。<br><br>四.隐式绑定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);        <span class=\"comment\">//obj 对象本身</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);      <span class=\"comment\">//2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>由上文代码可见，如果函数作为对象的方法时，方法中的 this 指向该对象。<br>但是如果是在对象方法中定义了函数，就会碰到我们常见用到的办法 :<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div></pre></td></tr></table></figure></p>\n<p>下面这个例子就很好说明了，f在在obj.foo里面定义，但它仍然属于一个普通函数，this 仍指向 window。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);      <span class=\"comment\">//Window</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);    <span class=\"comment\">//undefined</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        f();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure></p>\n<p>那么为了调用obj的a属性，我们要将f里面的this指向obj，那么就是我们代码中常见到的，将this缓存起来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(that);      <span class=\"comment\">//obj</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(that.a);    <span class=\"comment\">//2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        f();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure></p>\n<p>我们再看一种情况<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);       <span class=\"comment\">//Window</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);     <span class=\"comment\">//undefined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> fn = obj.foo;</div><div class=\"line\">fn();</div></pre></td></tr></table></figure></p>\n<p>这个fn是被赋值了obj .foo，并没有被执行，他的执行环境是在全局下面，所以指向了window。</p>\n<h5 id=\"五-构造函数-prototype-属性\"><a href=\"#五-构造函数-prototype-属性\" class=\"headerlink\" title=\"五.构造函数 prototype 属性\"></a>五.构造函数 prototype 属性</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Foo.prototype.getX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);        <span class=\"comment\">//Foo &#123;a: 2, getX: function&#125;</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);      <span class=\"comment\">//2</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.getX();</div></pre></td></tr></table></figure>\n<p>这个的原理其实还是在new  绑定里面。</p>\n<h5 id=\"六-DOM-event-this\"><a href=\"#六-DOM-event-this\" class=\"headerlink\" title=\"六.DOM event this\"></a>六.DOM event this</h5><p>this 始终指向这个处理程序所绑定的 HTML DOM 节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">     <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.handleClick);     </div><div class=\"line\">     <span class=\"comment\">//这里的 this 指向 Listener 这个对象。不是强调的是这里的 this</span></div><div class=\"line\">&#125;</div><div class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//&lt;div id=\"foo\"&gt;&lt;/div&gt;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</div></pre></td></tr></table></figure></p>\n<p>另外可以用bind来改变this<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Listener</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).addEventListener(<span class=\"string\">'click'</span>,<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>));      </div><div class=\"line\">&#125;</div><div class=\"line\">Listener.prototype.handleClick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);    <span class=\"comment\">//Listener &#123;&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> Listener();</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'foo'</span>).click();</div></pre></td></tr></table></figure></p>\n<h4 id=\"七-箭头函数\"><a href=\"#七-箭头函数\" class=\"headerlink\" title=\"七. 箭头函数\"></a>七. 箭头函数</h4><p>其他函数的this指向调用者，而箭头函数的this指向词法作用域，即定义的上下文。<br><br>在箭头函数中已经按照词法作用域绑定了，所以，用 call()或者 apply()调用箭头函数时，无法对 this 进行绑定，即传入的第一个参数被忽略。<br>在用箭头函数时，也不用再去用var that =this，来缓存变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);      <span class=\"comment\">//Object &#123;a: 2&#125;</span></div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);    <span class=\"comment\">//10</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        fn()()();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure></p>\n","excerpt":"一般来讲，this指向是面试都会问题的题目，好吧，这些样子写博客是不是太过于功利了，那就重来。一般来讲，this指向是js学习过程中必须掌握的知识，在实际开发中也一定会遇见的问题。那今天就结合实际来让自己加深一下原理印象。 普通函数this指向 箭头函数this指向 this指向谁？this取值是函数执行上下文的一部分，在调用函数时，会产生一个新的执行上下文，而this会指向调用者。用最常听到的话就是“ 谁调用就是指向谁”。","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"如何建立一套属于个人的信息管理系统？","date":"2017-08-07T16:55:43.000Z","path":"2017/08/08/rss服务和稍候阅读信息管理体系/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>每个程序员的成长都是一个过程，会有很长的一段瓶颈期，建立自己良好的学习习惯和有效收集信息的来源会帮你缩短瓶颈期。<br><br>本文介绍一个建立自己的信息管理系统的详细过程。<br><br>作为一个萌新，一般我获取信息的渠道来源于:</p>\n<ul>\n<li>知乎</li>\n<li>微信公众号</li>\n<li>掘金</li>\n<li>还有其他随意找到的很多文章如大神博客等<br><a id=\"more\"></a>\n在没有这个体系之前，我一般都是chrome浏览器，加入文件夹，然后千年不看一次，即使下次要到相同类型的文章也是重新谷歌，收藏的文章和知识点，不能化为自己的总结与知识，转化率为0，对于知识的沉淀与积累毫无作用。<br><br>应该有很多小白都有我这样子的苦恼， 所以这个使用rss和稍后阅读服务的体系可以将所有你看到的文章，都集中在阅读器，以便于搜索，甚至于可以标记已读未读。<br><br>以下是配置过程，适合小白参考。<h3 id=\"1-chrome-插件下载\"><a href=\"#1-chrome-插件下载\" class=\"headerlink\" title=\"1.chrome 插件下载\"></a>1.chrome 插件下载</h3><a href=\"https://chrome.google.com/webstore/detail/instapaper/ldjkgaaoikpmhmkelcgkgacicjfbofhh\" target=\"_blank\" rel=\"external\">扩展程序Instapaper</a>（点击下载）<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibldl4bykj21iy0gkgpm.jpg\" alt=\"\"><br>说明：该插件可以将你遇到的喜欢的文章作为稍后阅读收集起来<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblt3se70j21za0dcgok.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblubzp79j21z00840ux.jpg\" alt=\"\"></li>\n</ul>\n<p><a href=\"https://chrome.google.com/webstore/detail/rss-subscription-extensio/\nnlbjncdgjeocebhnmkbbbdekmmmcbfjd\" target=\"_blank\" rel=\"external\">RSS Subscription</a> (点击下载)<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblhty6ngj21n20kq440.jpg\" alt=\"\"><br>说明：插件会自动检测站点是否提供rss服务。</p>\n<p><a href=\"http://xclient.info/s/reeder.html?_=a8351a1e7b1ce5398e129424d4074d42\" target=\"_blank\" rel=\"external\">reeders阅读器</a>(点击下载)<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblne12lvj20vw0regol.jpg\" alt=\"\"></p>\n<p>以上是需要下载的插件和阅读器，接下来就是怎么样将这些文章能一并收集到我们的阅读器中。</p>\n<h3 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h3><ul>\n<li>配置订阅源</li>\n</ul>\n<ol>\n<li>选项</li>\n<li>设置默认订阅选项<br>说明: feedly<br>网址: <a href=\"http://cloud.feedly.com/#subscription/feed/%s\" target=\"_blank\" rel=\"external\">http://cloud.feedly.com/#subscription/feed/%s</a><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibm7o5l1nj20ri0cut9s.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibm8a1od0j21za0v6tbv.jpg\" alt=\"\"></li>\n<li>打开网址  <a href=\"https://feedly.com/i/my\" target=\"_blank\" rel=\"external\">https://feedly.com/i/my</a>  可以建立相应的文件目录，在收集文章的时候归类</li>\n</ol>\n<ul>\n<li><p>Instapaper在reeder3配置</p>\n<ol>\n<li>在instapaper<a href=\"https://www.instapaper.com\" target=\"_blank\" rel=\"external\">注册</a></li>\n<li>新建一个账号，关联帐号。即可以看到稍后阅读的文章<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibmytd0ezj20wi0wcn03.jpg\" alt=\"\"></li>\n</ol>\n<ul>\n<li>feedly和reeder3配置<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibn0olqyzj20x40sq76q.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibn27w691j20tq0tq41c.jpg\" alt=\"\"><br>由此就建立一个可以搜索，自己搜集的所有文章体系，便于自己搜索，总结。在左侧可建立目录来归纳总结。<br> 搜集资料过程只是一个过程，如何将这个转化为自己的东西才是我们所有人追求的目标。</p>\n</li>\n</ul>\n<p>——借鉴于<a href=\"http://moshui.site/2017/07/20/使用rss和稍后阅读服务构建知识管理体系/index.html\" target=\"_blank\" rel=\"external\">《使用rss和稍后阅读服务构建知识管理体系》</a>该篇文章</p>\n","excerpt":"前言每个程序员的成长都是一个过程，会有很长的一段瓶颈期，建立自己良好的学习习惯和有效收集信息的来源会帮你缩短瓶颈期。本文介绍一个建立自己的信息管理系统的详细过程。作为一个萌新，一般我获取信息的渠道来源于: 知乎 微信公众号 掘金 还有其他随意找到的很多文章如大神博客等","tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"gulp 使用","date":"2017-07-24T15:12:43.000Z","path":"2017/07/24/gulp初级入门学习/","content":"<h2 id=\"gulp-学习之路\"><a href=\"#gulp-学习之路\" class=\"headerlink\" title=\"gulp 学习之路\"></a>gulp 学习之路</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"安装node-js和npm-node-package-manager-包管理器\"><a href=\"#安装node-js和npm-node-package-manager-包管理器\" class=\"headerlink\" title=\"安装node.js和npm(node package manager)包管理器\"></a>安装node.js和npm(node package manager)包管理器</h5><ol>\n<li>使用npm安装插件：<code>npm install gulp-less  -g  --save-dev</code></li>\n<li>-g 全局安装  安装在C:\\Users\\Administrator\\AppData\\Roaming\\npm  下面，通过命令行在任意地方调用，不全局会下载在项目的 <code>node_modules</code>下面</li>\n<li>–save 将保存配置信息至 package.json(node.js项目配置文件)</li>\n<li>-dev 保存至 package.json的devDependencies 节点 ，不指定保存在dependencies节点<br><code>npm install --production</code> 下载dependencies节点的包</li>\n<li>卸载插件 <code>npm uninstall &lt;name&gt; [-g] [--save-dev]</code></li>\n<li>更新插件  <code>npm update [--save-dev]</code></li>\n<li>安装插件目录 <code>npm list</code>  // 查看npm帮助   <code>npm help</code></li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"使用gulp\"><a href=\"#使用gulp\" class=\"headerlink\" title=\"使用gulp\"></a>使用gulp</h3><p> A.安装gulp</p>\n<ol>\n<li><code>npm install gulp -g</code>  安装命令</li>\n<li><code>gulp -v</code> 查看版本<br>B.新建package.json文件（如下文）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"qn-wd-wangwang\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"directories\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"doc\"</span>: <span class=\"string\">\"doc\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-clean\"</span>: <span class=\"string\">\"^0.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-clean-css\"</span>: <span class=\"string\">\"^2.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-concat\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-htmlmin\"</span> : <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-inline-source\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-less\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-replace\"</span>: <span class=\"string\">\"^0.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rev\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rev-append\"</span>: <span class=\"string\">\"^0.1.8\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"less-plugin-autoprefix\"</span> : <span class=\"string\">\"^1.5.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"node-static\"</span>: <span class=\"string\">\"^0.7.9\"</span>,</div><div class=\"line\">    <span class=\"string\">\"open\"</span>: <span class=\"string\">\"^0.0.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pump\"</span>: <span class=\"string\">\"^1.0.2\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp default &amp; gulp watch\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"gulp dist \"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git@git.superboss.cc:raycloudFrontEnd/qn-wd-wangwang.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>npm help package.json</em>命令提示符执行</p>\n<h5 id=\"gulp-插件介绍\"><a href=\"#gulp-插件介绍\" class=\"headerlink\" title=\"gulp 插件介绍\"></a>gulp 插件介绍</h5><ol>\n<li>压缩html 插件   <code>gulp-htmlmin</code></li>\n<li>将html中的链接的代码(代码量不大)压缩进html内   <code>gulp-inline-source</code></li>\n<li>重新命名一个文件   <code>gulp-rename</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"framework/js/Tatami.onpageload.js\"</span> inline&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">      <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//清除HTML注释</span></div><div class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩HTML</span></div><div class=\"line\">      collapseBooleanAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//省略布尔属性的值 </span></div><div class=\"line\">      removeEmptyAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除所有空格作属性值 </span></div><div class=\"line\">      removeScriptTypeAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除&lt;script&gt;的type=\"text/javascript\"</span></div><div class=\"line\">      removeStyleLinkTypeAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除&lt;style&gt;和&lt;link&gt;的type=\"text/css\"</span></div><div class=\"line\">      minifyJS: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩页面JS</span></div><div class=\"line\">      minifyCSS: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩css</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  gulp.src(<span class=\"string\">'./_index.html'</span>)</div><div class=\"line\">      .pipe(inlinesource())</div><div class=\"line\">      **pipe(htmlmin(options))**</div><div class=\"line\">      .pipe(rename(<span class=\"string\">\"./index.html\"</span>))</div><div class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'.'</span>))  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>1.合并多个文件夹   <code>gulp-concat</code>   编译js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(moduleFile)</div><div class=\"line\">  .pipe(concat(<span class=\"string\">'modules.js'</span>))</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.压缩js   <code>gulp-uglify</code><br>3.在文件名字后面加版本号 <code>gulp-rev</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'minify:js'</span>, [<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./modules/modules.js'</span>)</div><div class=\"line\">    .pipe(minifyJs())</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">    .pipe(rev.manifest()) <span class=\"comment\">// 生成json文件</span></div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>))</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.替换文件 <code>gulp-replace</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(<span class=\"string\">'./_index.html'</span>)</div><div class=\"line\">     .pipe(replace(<span class=\"string\">'modules/modules.js'</span>,<span class=\"string\">`modules/<span class=\"subst\">$&#123;json[<span class=\"string\">'modules.js'</span>]&#125;</span>`</span>))</div><div class=\"line\">     .pipe(replace(<span class=\"string\">'combine.min.css'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;css[<span class=\"string\">'combine.min.css'</span>]&#125;</span>`</span>))</div><div class=\"line\">     .pipe(inlinesource())</div><div class=\"line\">     .pipe(htmlmin(options))</div><div class=\"line\">     .pipe(rename(<span class=\"string\">\"./index.html\"</span>))</div><div class=\"line\">     .pipe(gulp.dest(<span class=\"string\">'.'</span>))  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<h6 id=\"新建gulpfile文件-基础文件\"><a href=\"#新建gulpfile文件-基础文件\" class=\"headerlink\" title=\"新建gulpfile文件(基础文件)\"></a>新建gulpfile文件(基础文件)</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>), </div><div class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/less/index.less'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(less()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>)); <span class=\"comment\">//将会在src/css下生成index.css</span></div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'testLess'</span>, <span class=\"string\">'elseTask'</span>]);</div></pre></td></tr></table></figure>\n<h2 id=\"项目实际运用即问题\"><a href=\"#项目实际运用即问题\" class=\"headerlink\" title=\"项目实际运用即问题\"></a>项目实际运用即问题</h2><h5 id=\"优化html\"><a href=\"#优化html\" class=\"headerlink\" title=\"优化html\"></a>优化html</h5><p>1.删除不必要的代码<br>2.把所有的css和js合并称一个文件，并且在打包的时候给文件加后缀，确保没有<br>   js和css的缓存<br>   1.在打包的时候，将编译好的文件压缩出一个新的带后缀名的js，<br>     然后替换在html中的文件名<br>3.把重要且小的文件打入html，<br>   以防止没有很快加载出来，代码报错，并且压缩html</p>\n<h5 id=\"写过程中的困难\"><a href=\"#写过程中的困难\" class=\"headerlink\" title=\"写过程中的困难\"></a>写过程中的困难</h5><p>Q.html有缓存怎么办？一发包就没有加载到最新的module.js会报错？总不能让用户一直清楚缓存把？<br><br>A:在打包的时候，不要把上个版本的module.js清楚，将上个版本要发的文件和这次新生成的后缀名字的文件都保存下来，确保不白屏报错，等用户重新登陆之后自动会获取新的<br>麻烦点：就是要一直去保存上个版本，然后定期去删历届版本。不过效果很好。。插件发布以后再也没有什么白屏什么问题爆出来了。。</p>\n<hr>\n<p>Q:防劫持。我们的文件被劫持。。。虽然我们有https<br><br>1.尽量把js打成一个文件。<br>因为如果有两个文件，一个被劫持，就挂了。<br>   一个文件，如果劫持的代码在尾部。。那还有一线生机。<br>2.把module.js直接打进去html，如果文件很大，应该也不太好<br>3.去投诉运营商</p>\n<hr>\n<p>Q:打包过程中为什么我已经执行压缩css了，但是压缩完毕以后还是未压缩状态<br><br>A:打包命令是异步的，你这边压缩好了，下一个命令把你编译了，解决办法如下<br>1.给命令加执行顺序<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(moduleFile)</div><div class=\"line\">  .pipe(concat(<span class=\"string\">'modules.js'</span>))</div><div class=\"line\">  .pipe(.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<pre><code>在js 命令之后执行clean\n</code></pre><ol>\n<li>pipe 之后加回调</li>\n<li>分装成promise</li>\n</ol>\n","excerpt":"gulp 学习之路环境准备安装node.js和npm(node package manager)包管理器 使用npm安装插件：npm install gulp-less -g --save-dev -g 全局安装 安装在C:\\Users\\Administrator\\AppData\\Roaming\\npm 下面，通过命令行在任意地方调用，不全局会下载在项目的 node_modules下面 –save 将保存配置信息至 package.json(node.js项目配置文件) -dev 保存至 package.json的devDependencies 节点 ，不指定保存在dependencies节点npm install --production 下载dependencies节点的包 卸载插件 npm uninstall &lt;name&gt; [-g] [--save-dev] 更新插件 npm update [--save-dev] 安装插件目录 npm list // 查看npm帮助 npm help","tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"拼命发ajax的life。","date":"2016-07-04T13:03:17.000Z","path":"2016/07/04/ajax创建过程/","content":"<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><pre><code>前几天听同事吐槽，卧槽，我竟然发ajax在这里发了一年多了，哎~ajax封装以后也就是那几个属性。\n但是面试的时候人家会问ajax的原理~\n好吧，之前面了那么多公司，我讲了一大堆，看着对方蒙蔽的眼神\n到底我讲的对不对。。算了，我整理一下~给自己看吧。既然找不到25k的男人，就做一个25k的女人。\n</code></pre><h4 id=\"ajax的过程\"><a href=\"#ajax的过程\" class=\"headerlink\" title=\"ajax的过程\"></a>ajax的过程</h4><pre><code>1. 新建一个XMLHttpRequest对象。\n2. 调用open()方法。传三个参数：请求类型，url，是否异步。封装的ajax中有对应需要填写的参数，\n  应该是type，url，async。\n  xhr.open(&quot;get&quot;,url,false) 注意：open是预备状态，没有发送特定请求\n3. 调用send()方法。传入data,有时候有些请求也不用发送给后台数据，那就放一个null进去就好了，\n  这个是真的请求发过去了。\n</code></pre><a id=\"more\"></a>\n<h4 id=\"和后台\"><a href=\"#和后台\" class=\"headerlink\" title=\"和后台\"></a>和后台</h4><pre><code>在后台java代码里面有一个对应的request，和respone。。\nrequest写明了他这个controller需要前台给他什么数据，然后逻辑处理以后，\n将返回给前端的数据放在respone里面。\n当前端那边得到请求成功的信息以后，拿到这些数据，在做相应的逻辑处理。\n你敢信我在面大网易的时候，问我知道java多少蒙蔽的表情吗~哎，一把辛酸泪。\n一般我们可以在控制台里面的header看到我们给后台传了什么值，\nrespone里面看到请求成功以后，后台给的值，方便联调 (如果你遇见过一个很好的后台，请珍惜，请爱护，我爱我们两个可爱的后台哥哥，虽然他们已经结婚了)。\n</code></pre><h4 id=\"返回\"><a href=\"#返回\" class=\"headerlink\" title=\"返回\"></a>返回</h4><pre><code>同步：成功以后，会把数据填充到xhr对象的属性，\n  -responseText：响应回来的文本\n  -responseXML:包含响应数据中的XML DOM文档\n  -status:响应HTTP状态\n  -statusText:HTTP请求的说明\n  这里面如何判断请求成功，一般是当status是200的时候，应该是可以了，响应文本应该就绪了。\n\n异步：不能等响应成功再执行。这时候检测xhr的readyStatus属性\n-0, 未初始化，尚未调用open()\n-1, 启动  open(),未调用send()\n-2, 发送  调用send()\n-3, 接收  接收到部分响应\n-4, 完成  接收到全部，且应用\n\n注意：曾近有一个场景碰到，我需要向后台发送一个ajax请求，\n当请求成功以后用表单提交的方法向后台发送请求打开一个新页面，这种非人为提交的表格行为。。\n潇潇洒洒的被浏览器拦截了，然后页面不能打开，陷入了一种莫名的尴尬。\n最后是将ajax的请求方式改为同步，当请求成功以后再表格提交~这种情况下，\n浏览器没有拦截页面，我觉得还是挺酷的，那个时候第一个碰到改变ajax请求方式来解决一个问题，\n印象比较深刻。\n</code></pre><h4 id=\"get和post的故事\"><a href=\"#get和post的故事\" class=\"headerlink\" title=\"get和post的故事\"></a>get和post的故事</h4><pre><code>这两个值是在open()方法调用传入的第一个参数\nget： 我们在项目中就是一两个参数，直接拼在url里面 但是字符的格式要没问题，\n      需要encodeURIComponent()   进行编码，并且用&amp;隔开就好了。\n      应该是有函数可以检测格式对不对。。\npost：post请求一般都是有很多数据需要发送至后台时用的，就是send()请求中的data。\n      用serialize()序列化数据。\n      根据项目的不同，写不同的util方法拿到我们要的数据格式或者如果在html中写数据等等。\n\n注意：这两者也还是有很多不同的，比如数据多的时候一般用post，\n      然后post请求的url不会被直接拿到，可以避免一些xss的漏洞什么。\n      但是get快~速度据说是post两倍。看情况选择咯。\n</code></pre><h4 id=\"xmlHttpRequest2级\"><a href=\"#xmlHttpRequest2级\" class=\"headerlink\" title=\"xmlHttpRequest2级\"></a>xmlHttpRequest2级</h4><pre><code>- formdata\n     在send()方法调用的时候，需要传入data，这是在请求中，是创建了一个formData对象的，\n         - var data =new FormData();\n         - data.append(&quot;name&quot;,&quot;xiaomu&quot;);\n     append()方法接收了两个参数，键和值。\n- 超时设定\n  浏览器在规定时间内没有接收到响应的时候，会调用ontimeout处理程序。\n  对应ajax里面有一个超时属性的设置\n-overrideMimeType()\n  在send()方法之前。\n</code></pre>","excerpt":"题外话前几天听同事吐槽，卧槽，我竟然发ajax在这里发了一年多了，哎~ajax封装以后也就是那几个属性。 但是面试的时候人家会问ajax的原理~ 好吧，之前面了那么多公司，我讲了一大堆，看着对方蒙蔽的眼神 到底我讲的对不对。。算了，我整理一下~给自己看吧。既然找不到25k的男人，就做一个25k的女人。 ajax的过程1. 新建一个XMLHttpRequest对象。 2. 调用open()方法。传三个参数：请求类型，url，是否异步。封装的ajax中有对应需要填写的参数， 应该是type，url，async。 xhr.open(&quot;get&quot;,url,false) 注意：open是预备状态，没有发送特定请求 3. 调用send()方法。传入data,有时候有些请求也不用发送给后台数据，那就放一个null进去就好了， 这个是真的请求发过去了。","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"浏览器性能优化","date":"2016-06-27T15:12:43.000Z","path":"2016/06/27/性能优化/","content":"<h5 id=\"减少http请求\"><a href=\"#减少http请求\" class=\"headerlink\" title=\"减少http请求\"></a>减少http请求</h5><pre><code>1.通过url向服务器建立连接，然后浏览器向服务器发送请求，服务器再返回响应的信息，浏览器收到信息以后，对数据执行\n2.因为在请求里面会有很多的图片，文件等需要耗费时间加载，会耗性能\n3.解决方式：合并图片(css sprites)，尽量减少js和css文件，图片较多的页面用lazyload技术进行优化(这个方法没试过。。)\n</code></pre><h5 id=\"repaint-重绘-和reflow-重排\"><a href=\"#repaint-重绘-和reflow-重排\" class=\"headerlink\" title=\"repaint(重绘)和reflow(重排)\"></a>repaint(重绘)和reflow(重排)</h5><pre><code>1.重绘一个元素的外观被改变，例如visibility，背景色等\n2.重排是dom变化影响了元素的几何元素，宽高 解决方案：不要用style，加class名字，有动画效果用position设置，因为脱离文档流，就不会改变布局。。减少reflow\n</code></pre>  <a id=\"more\"></a>\n<h5 id=\"减少Dom减少\"><a href=\"#减少Dom减少\" class=\"headerlink\" title=\"减少Dom减少\"></a>减少Dom减少</h5><pre><code>1.改变dom结构，对dom进行循环解决方案：较少dom元素的查询和修改，查询时赋值给局部变量，我个人理解就是将循环出来的变量赋值，然后用这个值去填入\n</code></pre><h5 id=\"使用json进行数据狡猾\"><a href=\"#使用json进行数据狡猾\" class=\"headerlink\" title=\"使用json进行数据狡猾\"></a>使用json进行数据狡猾</h5><pre><code>1.与xml相比json用压缩后文件比较小。json是比较好用。。。各种发ajax回来\n</code></pre><h5 id=\"高效使用HTML和css样式\"><a href=\"#高效使用HTML和css样式\" class=\"headerlink\" title=\"高效使用HTML和css样式\"></a>高效使用HTML和css样式</h5><pre><code>1.合理用html~怎么合理，感觉很抽象，就尽量遵守规范的用\n2.css的话选择器是从右到左解析..就是不要范二写div ul li a{}这种。。shability。。\n3.css选择符开销来算\n   -ID选择器   #box\n   -类选择器   .box\n   -标签       div\n   -伪类和伪元素 a:hover\n</code></pre><h5 id=\"使用cdn\"><a href=\"#使用cdn\" class=\"headerlink\" title=\"使用cdn\"></a>使用cdn</h5><pre><code>1.我们项目中用到蜻蜓，把合同文件什么的放到蜻蜓上面去。。那个原理艾玛有点不是很懂。。写出来感觉很复杂。。\n</code></pre><h5 id=\"css，js放在外部文件中引入，css放头，js放在尾部\"><a href=\"#css，js放在外部文件中引入，css放头，js放在尾部\" class=\"headerlink\" title=\"css，js放在外部文件中引入，css放头，js放在尾部\"></a>css，js放在外部文件中引入，css放头，js放在尾部</h5><pre><code>1. 易管理，易扩展，方便管理，重复利用\n2. js阻塞就是执行完才可以继续渲染页面，所以放在最后会比较好\n</code></pre><h5 id=\"精简css，js\"><a href=\"#精简css，js\" class=\"headerlink\" title=\"精简css，js\"></a>精简css，js</h5><pre><code>1.压缩这些文件(YUI Compressor)\n2.好奇，打包了以后不就压缩了嘛。。。。\n</code></pre><h5 id=\"压缩图片和使用图片Sprite技术\"><a href=\"#压缩图片和使用图片Sprite技术\" class=\"headerlink\" title=\"压缩图片和使用图片Sprite技术\"></a>压缩图片和使用图片Sprite技术</h5><pre><code>1.以前实习的时候告诉我，每张图片怎么样都不要超过200kb。。\n2.sprite技术就是一张图放很多，然后显示部分。。\n</code></pre><h5 id=\"注意cookie和大小和污染\"><a href=\"#注意cookie和大小和污染\" class=\"headerlink\" title=\"注意cookie和大小和污染\"></a>注意cookie和大小和污染</h5><pre><code>1.其实我不懂cookie。。但是就是不要太晚清除，也不要分分钟去清除。\n</code></pre>","excerpt":"减少http请求1.通过url向服务器建立连接，然后浏览器向服务器发送请求，服务器再返回响应的信息，浏览器收到信息以后，对数据执行 2.因为在请求里面会有很多的图片，文件等需要耗费时间加载，会耗性能 3.解决方式：合并图片(css sprites)，尽量减少js和css文件，图片较多的页面用lazyload技术进行优化(这个方法没试过。。) repaint(重绘)和reflow(重排)1.重绘一个元素的外观被改变，例如visibility，背景色等 2.重排是dom变化影响了元素的几何元素，宽高 解决方案：不要用style，加class名字，有动画效果用position设置，因为脱离文档流，就不会改变布局。。减少reflow","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"just want to say something","date":"2016-06-26T13:46:28.000Z","path":"2016/06/26/Blog-travel/","content":"<p>很清晰的记得去年的6月25日拿完毕业证，原来我已经毕业一整年了，很巧的是，明天是我24岁的阳历生日。<br>所以现在的我是毕业一整年，整整24周岁的我。<br>我还记得刚毕业找到工作的开心，我还记得被面试时候的蒙蔽，我还记得面完试，大汗淋漓，手机没有电，找不到回去的路的无奈。<br>原来已经一年了。<br><a id=\"more\"></a><br>不算实习，我做前端一年了。<br>时间过得真的好快，去年的一整个半年，疯狂的加班，学习，原来自己这么超能力。<br>想起，看不懂项目，看不懂文档，凌晨从公司出来，蹲在路边很想哭的感觉。<br>想起，终于看懂了，拍视频给别人看的幼稚。<br>分手，工作压力超级大，不知道自己是怎么撑过那段时光的，给自己点赞。<br>做了一年的前端，我原来也能对一件事情的热情持续那么久，作为一个女生，也从来没想过想转行，但是想过找一个代码写的很6的男朋友，一起装逼一起飞。。<br>特别感谢遇到的帮助过我的人，让我觉得，人生这么温暖，也特别感谢觉得我不行的人，因为我是傲娇到不能让别人说不好的人。<br>做前端是缘分，但是我很喜欢，在过去的22年都没有想过我竟然要做一个程序员。做了以后我竟然很喜欢。这是一种什么体验。。<br>弄出一个博客，记录一下，自己的成长，不是有人说，有时候发朋友圈也不是为了给别人看，也是为了给自己留下在什么时间段留下的记忆和记录一样。我希望自己可以坚持，<br>能认真做技术，认真做一个程序员，认真的做一个小巫女。</p>\n","excerpt":"很清晰的记得去年的6月25日拿完毕业证，原来我已经毕业一整年了，很巧的是，明天是我24岁的阳历生日。所以现在的我是毕业一整年，整整24周岁的我。我还记得刚毕业找到工作的开心，我还记得被面试时候的蒙蔽，我还记得面完试，大汗淋漓，手机没有电，找不到回去的路的无奈。原来已经一年了。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]
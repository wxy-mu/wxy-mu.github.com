[{"title":"如何建立一套属于个人的信息管理系统？","date":"2017-08-07T16:55:43.000Z","path":"2017/08/08/rss服务和稍候阅读信息管理体系/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>每个程序员的成长都是一个过程，会有很长的一段瓶颈期，建立自己良好的学习习惯和有效收集信息的来源会帮你缩短瓶颈期。<br><br>本文介绍一个建立自己的信息管理系统的详细过程。<br><br>作为一个萌新，一般我获取信息的渠道来源于:</p>\n<ul>\n<li>知乎</li>\n<li>微信公众号</li>\n<li>掘金</li>\n<li>还有其他随意找到的很多文章如大神博客等<br><a id=\"more\"></a>\n在没有这个体系之前，我一般都是chrome浏览器，加入文件夹，然后千年不看一次，即使下次要到相同类型的文章也是重新谷歌，收藏的文章和知识点，不能化为自己的总结与知识，转化率为0，对于知识的沉淀与积累毫无作用。<br><br>应该有很多小白都有我这样子的苦恼， 所以这个使用rss和稍后阅读服务的体系可以将所有你看到的文章，都集中在阅读器，以便于搜索，甚至于可以标记已读未读。<br><br>以下是配置过程，适合小白参考。<h3 id=\"1-chrome-插件下载\"><a href=\"#1-chrome-插件下载\" class=\"headerlink\" title=\"1.chrome 插件下载\"></a>1.chrome 插件下载</h3><a href=\"https://chrome.google.com/webstore/detail/instapaper/ldjkgaaoikpmhmkelcgkgacicjfbofhh\" target=\"_blank\" rel=\"external\">扩展程序Instapaper</a>（点击下载）<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibldl4bykj21iy0gkgpm.jpg\" alt=\"\"><br>说明：该插件可以将你遇到的喜欢的文章作为稍后阅读收集起来<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblt3se70j21za0dcgok.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblubzp79j21z00840ux.jpg\" alt=\"\"></li>\n</ul>\n<p><a href=\"https://chrome.google.com/webstore/detail/rss-subscription-extensio/\nnlbjncdgjeocebhnmkbbbdekmmmcbfjd\" target=\"_blank\" rel=\"external\">RSS Subscription</a> (点击下载)<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblhty6ngj21n20kq440.jpg\" alt=\"\"><br>说明：插件会自动检测站点是否提供rss服务。</p>\n<p><a href=\"http://xclient.info/s/reeder.html?_=a8351a1e7b1ce5398e129424d4074d42\" target=\"_blank\" rel=\"external\">reeders阅读器</a>(点击下载)<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fiblne12lvj20vw0regol.jpg\" alt=\"\"></p>\n<p>以上是需要下载的插件和阅读器，接下来就是怎么样将这些文章能一并收集到我们的阅读器中。</p>\n<h3 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h3><ul>\n<li>配置订阅源</li>\n</ul>\n<ol>\n<li>选项</li>\n<li>设置默认订阅选项<br>说明: feedly<br>网址: <a href=\"http://cloud.feedly.com/#subscription/feed/%s\" target=\"_blank\" rel=\"external\">http://cloud.feedly.com/#subscription/feed/%s</a><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibm7o5l1nj20ri0cut9s.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibm8a1od0j21za0v6tbv.jpg\" alt=\"\"></li>\n<li>打开网址  <a href=\"https://feedly.com/i/my\" target=\"_blank\" rel=\"external\">https://feedly.com/i/my</a>  可以建立相应的文件目录，在收集文章的时候归类</li>\n</ol>\n<ul>\n<li><p>Instapaper在reeder3配置</p>\n<ol>\n<li>在instapaper<a href=\"https://www.instapaper.com\" target=\"_blank\" rel=\"external\">注册</a></li>\n<li>新建一个账号，关联帐号。即可以看到稍后阅读的文章<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibmytd0ezj20wi0wcn03.jpg\" alt=\"\"></li>\n</ol>\n<ul>\n<li>feedly和reeder3配置<br><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibn0olqyzj20x40sq76q.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p><img src=\"http://ww1.sinaimg.cn/large/a1dd3015gy1fibn27w691j20tq0tq41c.jpg\" alt=\"\"><br>由此就建立一个可以搜索，自己搜集的所有文章体系，便于自己搜索，总结。在左侧可建立目录来归纳总结。<br> 搜集资料过程只是一个过程，如何将这个转化为自己的东西才是我们所有人追求的目标。</p>\n</li>\n</ul>\n<p>——借鉴于<a href=\"http://moshui.site/2017/07/20/使用rss和稍后阅读服务构建知识管理体系/index.html\" target=\"_blank\" rel=\"external\">《使用rss和稍后阅读服务构建知识管理体系》</a>该篇文章</p>\n","excerpt":"前言每个程序员的成长都是一个过程，会有很长的一段瓶颈期，建立自己良好的学习习惯和有效收集信息的来源会帮你缩短瓶颈期。本文介绍一个建立自己的信息管理系统的详细过程。作为一个萌新，一般我获取信息的渠道来源于: 知乎 微信公众号 掘金 还有其他随意找到的很多文章如大神博客等","tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"gulp 使用","date":"2017-07-24T15:12:43.000Z","path":"2017/07/24/gulp初级入门学习/","content":"<h2 id=\"gulp-学习之路\"><a href=\"#gulp-学习之路\" class=\"headerlink\" title=\"gulp 学习之路\"></a>gulp 学习之路</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"安装node-js和npm-node-package-manager-包管理器\"><a href=\"#安装node-js和npm-node-package-manager-包管理器\" class=\"headerlink\" title=\"安装node.js和npm(node package manager)包管理器\"></a>安装node.js和npm(node package manager)包管理器</h5><ol>\n<li>使用npm安装插件：<code>npm install gulp-less  -g  --save-dev</code></li>\n<li>-g 全局安装  安装在C:\\Users\\Administrator\\AppData\\Roaming\\npm  下面，通过命令行在任意地方调用，不全局会下载在项目的 <code>node_modules</code>下面</li>\n<li>–save 将保存配置信息至 package.json(node.js项目配置文件)</li>\n<li>-dev 保存至 package.json的devDependencies 节点 ，不指定保存在dependencies节点<br><code>npm install --production</code> 下载dependencies节点的包</li>\n<li>卸载插件 <code>npm uninstall &lt;name&gt; [-g] [--save-dev]</code></li>\n<li>更新插件  <code>npm update [--save-dev]</code></li>\n<li>安装插件目录 <code>npm list</code>  // 查看npm帮助   <code>npm help</code></li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"使用gulp\"><a href=\"#使用gulp\" class=\"headerlink\" title=\"使用gulp\"></a>使用gulp</h3><p> A.安装gulp</p>\n<ol>\n<li><code>npm install gulp -g</code>  安装命令</li>\n<li><code>gulp -v</code> 查看版本<br>B.新建package.json文件（如下文）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"qn-wd-wangwang\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"directories\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"doc\"</span>: <span class=\"string\">\"doc\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-clean\"</span>: <span class=\"string\">\"^0.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-clean-css\"</span>: <span class=\"string\">\"^2.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-concat\"</span>: <span class=\"string\">\"^2.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-htmlmin\"</span> : <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-inline-source\"</span>: <span class=\"string\">\"^3.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-less\"</span>: <span class=\"string\">\"^3.3.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rename\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-replace\"</span>: <span class=\"string\">\"^0.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rev\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-rev-append\"</span>: <span class=\"string\">\"^0.1.8\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"less-plugin-autoprefix\"</span> : <span class=\"string\">\"^1.5.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"node-static\"</span>: <span class=\"string\">\"^0.7.9\"</span>,</div><div class=\"line\">    <span class=\"string\">\"open\"</span>: <span class=\"string\">\"^0.0.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pump\"</span>: <span class=\"string\">\"^1.0.2\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"gulp default &amp; gulp watch\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"gulp dist \"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git@git.superboss.cc:raycloudFrontEnd/qn-wd-wangwang.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>npm help package.json</em>命令提示符执行</p>\n<h5 id=\"gulp-插件介绍\"><a href=\"#gulp-插件介绍\" class=\"headerlink\" title=\"gulp 插件介绍\"></a>gulp 插件介绍</h5><ol>\n<li>压缩html 插件   <code>gulp-htmlmin</code></li>\n<li>将html中的链接的代码(代码量不大)压缩进html内   <code>gulp-inline-source</code></li>\n<li>重新命名一个文件   <code>gulp-rename</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"framework/js/Tatami.onpageload.js\"</span> inline&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">      <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//清除HTML注释</span></div><div class=\"line\">      collapseWhitespace: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩HTML</span></div><div class=\"line\">      collapseBooleanAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//省略布尔属性的值 </span></div><div class=\"line\">      removeEmptyAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除所有空格作属性值 </span></div><div class=\"line\">      removeScriptTypeAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除&lt;script&gt;的type=\"text/javascript\"</span></div><div class=\"line\">      removeStyleLinkTypeAttributes: <span class=\"literal\">true</span>,<span class=\"comment\">//删除&lt;style&gt;和&lt;link&gt;的type=\"text/css\"</span></div><div class=\"line\">      minifyJS: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩页面JS</span></div><div class=\"line\">      minifyCSS: <span class=\"literal\">true</span>,<span class=\"comment\">//压缩css</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  gulp.src(<span class=\"string\">'./_index.html'</span>)</div><div class=\"line\">      .pipe(inlinesource())</div><div class=\"line\">      **pipe(htmlmin(options))**</div><div class=\"line\">      .pipe(rename(<span class=\"string\">\"./index.html\"</span>))</div><div class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'.'</span>))  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>1.合并多个文件夹   <code>gulp-concat</code>   编译js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(moduleFile)</div><div class=\"line\">  .pipe(concat(<span class=\"string\">'modules.js'</span>))</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>2.压缩js   <code>gulp-uglify</code><br>3.在文件名字后面加版本号 <code>gulp-rev</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'minify:js'</span>, [<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./modules/modules.js'</span>)</div><div class=\"line\">    .pipe(minifyJs())</div><div class=\"line\">    .pipe(rev())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">    .pipe(rev.manifest()) <span class=\"comment\">// 生成json文件</span></div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>))</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.替换文件 <code>gulp-replace</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(<span class=\"string\">'./_index.html'</span>)</div><div class=\"line\">     .pipe(replace(<span class=\"string\">'modules/modules.js'</span>,<span class=\"string\">`modules/<span class=\"subst\">$&#123;json[<span class=\"string\">'modules.js'</span>]&#125;</span>`</span>))</div><div class=\"line\">     .pipe(replace(<span class=\"string\">'combine.min.css'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;css[<span class=\"string\">'combine.min.css'</span>]&#125;</span>`</span>))</div><div class=\"line\">     .pipe(inlinesource())</div><div class=\"line\">     .pipe(htmlmin(options))</div><div class=\"line\">     .pipe(rename(<span class=\"string\">\"./index.html\"</span>))</div><div class=\"line\">     .pipe(gulp.dest(<span class=\"string\">'.'</span>))  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<h6 id=\"新建gulpfile文件-基础文件\"><a href=\"#新建gulpfile文件-基础文件\" class=\"headerlink\" title=\"新建gulpfile文件(基础文件)\"></a>新建gulpfile文件(基础文件)</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>), </div><div class=\"line\">    less = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'testLess'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'src/less/index.less'</span>) <span class=\"comment\">//该任务针对的文件</span></div><div class=\"line\">        .pipe(less()) <span class=\"comment\">//该任务调用的模块</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'src/css'</span>)); <span class=\"comment\">//将会在src/css下生成index.css</span></div><div class=\"line\">&#125;);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'testLess'</span>, <span class=\"string\">'elseTask'</span>]);</div></pre></td></tr></table></figure>\n<h2 id=\"项目实际运用即问题\"><a href=\"#项目实际运用即问题\" class=\"headerlink\" title=\"项目实际运用即问题\"></a>项目实际运用即问题</h2><h5 id=\"优化html\"><a href=\"#优化html\" class=\"headerlink\" title=\"优化html\"></a>优化html</h5><p>1.删除不必要的代码<br>2.把所有的css和js合并称一个文件，并且在打包的时候给文件加后缀，确保没有<br>   js和css的缓存<br>   1.在打包的时候，将编译好的文件压缩出一个新的带后缀名的js，<br>     然后替换在html中的文件名<br>3.把重要且小的文件打入html，<br>   以防止没有很快加载出来，代码报错，并且压缩html</p>\n<h5 id=\"写过程中的困难\"><a href=\"#写过程中的困难\" class=\"headerlink\" title=\"写过程中的困难\"></a>写过程中的困难</h5><p>Q.html有缓存怎么办？一发包就没有加载到最新的module.js会报错？总不能让用户一直清楚缓存把？<br><br>A:在打包的时候，不要把上个版本的module.js清楚，将上个版本要发的文件和这次新生成的后缀名字的文件都保存下来，确保不白屏报错，等用户重新登陆之后自动会获取新的<br>麻烦点：就是要一直去保存上个版本，然后定期去删历届版本。不过效果很好。。插件发布以后再也没有什么白屏什么问题爆出来了。。</p>\n<hr>\n<p>Q:防劫持。我们的文件被劫持。。。虽然我们有https<br><br>1.尽量把js打成一个文件。<br>因为如果有两个文件，一个被劫持，就挂了。<br>   一个文件，如果劫持的代码在尾部。。那还有一线生机。<br>2.把module.js直接打进去html，如果文件很大，应该也不太好<br>3.去投诉运营商</p>\n<hr>\n<p>Q:打包过程中为什么我已经执行压缩css了，但是压缩完毕以后还是未压缩状态<br><br>A:打包命令是异步的，你这边压缩好了，下一个命令把你编译了，解决办法如下<br>1.给命令加执行顺序<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, [<span class=\"string\">'clean'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(moduleFile)</div><div class=\"line\">  .pipe(concat(<span class=\"string\">'modules.js'</span>))</div><div class=\"line\">  .pipe(.dest(<span class=\"string\">'./modules'</span>))</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<pre><code>在js 命令之后执行clean\n</code></pre><ol>\n<li>pipe 之后加回调</li>\n<li>分装成promise</li>\n</ol>\n","excerpt":"gulp 学习之路环境准备安装node.js和npm(node package manager)包管理器 使用npm安装插件：npm install gulp-less -g --save-dev -g 全局安装 安装在C:\\Users\\Administrator\\AppData\\Roaming\\npm 下面，通过命令行在任意地方调用，不全局会下载在项目的 node_modules下面 –save 将保存配置信息至 package.json(node.js项目配置文件) -dev 保存至 package.json的devDependencies 节点 ，不指定保存在dependencies节点npm install --production 下载dependencies节点的包 卸载插件 npm uninstall &lt;name&gt; [-g] [--save-dev] 更新插件 npm update [--save-dev] 安装插件目录 npm list // 查看npm帮助 npm help","tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"拼命发ajax的life。","date":"2016-07-04T13:03:17.000Z","path":"2016/07/04/ajax创建过程/","content":"<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><pre><code>前几天听同事吐槽，卧槽，我竟然发ajax在这里发了一年多了，哎~ajax封装以后也就是那几个属性。\n但是面试的时候人家会问ajax的原理~\n好吧，之前面了那么多公司，我讲了一大堆，看着对方蒙蔽的眼神\n到底我讲的对不对。。算了，我整理一下~给自己看吧。既然找不到25k的男人，就做一个25k的女人。\n</code></pre><h4 id=\"ajax的过程\"><a href=\"#ajax的过程\" class=\"headerlink\" title=\"ajax的过程\"></a>ajax的过程</h4><pre><code>1. 新建一个XMLHttpRequest对象。\n2. 调用open()方法。传三个参数：请求类型，url，是否异步。封装的ajax中有对应需要填写的参数，\n  应该是type，url，async。\n  xhr.open(&quot;get&quot;,url,false) 注意：open是预备状态，没有发送特定请求\n3. 调用send()方法。传入data,有时候有些请求也不用发送给后台数据，那就放一个null进去就好了，\n  这个是真的请求发过去了。\n</code></pre><a id=\"more\"></a>\n<h4 id=\"和后台\"><a href=\"#和后台\" class=\"headerlink\" title=\"和后台\"></a>和后台</h4><pre><code>在后台java代码里面有一个对应的request，和respone。。\nrequest写明了他这个controller需要前台给他什么数据，然后逻辑处理以后，\n将返回给前端的数据放在respone里面。\n当前端那边得到请求成功的信息以后，拿到这些数据，在做相应的逻辑处理。\n你敢信我在面大网易的时候，问我知道java多少蒙蔽的表情吗~哎，一把辛酸泪。\n一般我们可以在控制台里面的header看到我们给后台传了什么值，\nrespone里面看到请求成功以后，后台给的值，方便联调 (如果你遇见过一个很好的后台，请珍惜，请爱护，我爱我们两个可爱的后台哥哥，虽然他们已经结婚了)。\n</code></pre><h4 id=\"返回\"><a href=\"#返回\" class=\"headerlink\" title=\"返回\"></a>返回</h4><pre><code>同步：成功以后，会把数据填充到xhr对象的属性，\n  -responseText：响应回来的文本\n  -responseXML:包含响应数据中的XML DOM文档\n  -status:响应HTTP状态\n  -statusText:HTTP请求的说明\n  这里面如何判断请求成功，一般是当status是200的时候，应该是可以了，响应文本应该就绪了。\n\n异步：不能等响应成功再执行。这时候检测xhr的readyStatus属性\n-0, 未初始化，尚未调用open()\n-1, 启动  open(),未调用send()\n-2, 发送  调用send()\n-3, 接收  接收到部分响应\n-4, 完成  接收到全部，且应用\n\n注意：曾近有一个场景碰到，我需要向后台发送一个ajax请求，\n当请求成功以后用表单提交的方法向后台发送请求打开一个新页面，这种非人为提交的表格行为。。\n潇潇洒洒的被浏览器拦截了，然后页面不能打开，陷入了一种莫名的尴尬。\n最后是将ajax的请求方式改为同步，当请求成功以后再表格提交~这种情况下，\n浏览器没有拦截页面，我觉得还是挺酷的，那个时候第一个碰到改变ajax请求方式来解决一个问题，\n印象比较深刻。\n</code></pre><h4 id=\"get和post的故事\"><a href=\"#get和post的故事\" class=\"headerlink\" title=\"get和post的故事\"></a>get和post的故事</h4><pre><code>这两个值是在open()方法调用传入的第一个参数\nget： 我们在项目中就是一两个参数，直接拼在url里面 但是字符的格式要没问题，\n      需要encodeURIComponent()   进行编码，并且用&amp;隔开就好了。\n      应该是有函数可以检测格式对不对。。\npost：post请求一般都是有很多数据需要发送至后台时用的，就是send()请求中的data。\n      用serialize()序列化数据。\n      根据项目的不同，写不同的util方法拿到我们要的数据格式或者如果在html中写数据等等。\n\n注意：这两者也还是有很多不同的，比如数据多的时候一般用post，\n      然后post请求的url不会被直接拿到，可以避免一些xss的漏洞什么。\n      但是get快~速度据说是post两倍。看情况选择咯。\n</code></pre><h4 id=\"xmlHttpRequest2级\"><a href=\"#xmlHttpRequest2级\" class=\"headerlink\" title=\"xmlHttpRequest2级\"></a>xmlHttpRequest2级</h4><pre><code>- formdata\n     在send()方法调用的时候，需要传入data，这是在请求中，是创建了一个formData对象的，\n         - var data =new FormData();\n         - data.append(&quot;name&quot;,&quot;xiaomu&quot;);\n     append()方法接收了两个参数，键和值。\n- 超时设定\n  浏览器在规定时间内没有接收到响应的时候，会调用ontimeout处理程序。\n  对应ajax里面有一个超时属性的设置\n-overrideMimeType()\n  在send()方法之前。\n</code></pre>","excerpt":"题外话前几天听同事吐槽，卧槽，我竟然发ajax在这里发了一年多了，哎~ajax封装以后也就是那几个属性。 但是面试的时候人家会问ajax的原理~ 好吧，之前面了那么多公司，我讲了一大堆，看着对方蒙蔽的眼神 到底我讲的对不对。。算了，我整理一下~给自己看吧。既然找不到25k的男人，就做一个25k的女人。 ajax的过程1. 新建一个XMLHttpRequest对象。 2. 调用open()方法。传三个参数：请求类型，url，是否异步。封装的ajax中有对应需要填写的参数， 应该是type，url，async。 xhr.open(&quot;get&quot;,url,false) 注意：open是预备状态，没有发送特定请求 3. 调用send()方法。传入data,有时候有些请求也不用发送给后台数据，那就放一个null进去就好了， 这个是真的请求发过去了。","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"浏览器性能优化","date":"2016-06-27T15:12:43.000Z","path":"2016/06/27/性能优化/","content":"<h5 id=\"减少http请求\"><a href=\"#减少http请求\" class=\"headerlink\" title=\"减少http请求\"></a>减少http请求</h5><pre><code>1.通过url向服务器建立连接，然后浏览器向服务器发送请求，服务器再返回响应的信息，浏览器收到信息以后，对数据执行\n2.因为在请求里面会有很多的图片，文件等需要耗费时间加载，会耗性能\n3.解决方式：合并图片(css sprites)，尽量减少js和css文件，图片较多的页面用lazyload技术进行优化(这个方法没试过。。)\n</code></pre><h5 id=\"repaint-重绘-和reflow-重排\"><a href=\"#repaint-重绘-和reflow-重排\" class=\"headerlink\" title=\"repaint(重绘)和reflow(重排)\"></a>repaint(重绘)和reflow(重排)</h5><pre><code>1.重绘一个元素的外观被改变，例如visibility，背景色等\n2.重排是dom变化影响了元素的几何元素，宽高 解决方案：不要用style，加class名字，有动画效果用position设置，因为脱离文档流，就不会改变布局。。减少reflow\n</code></pre>  <a id=\"more\"></a>\n<h5 id=\"减少Dom减少\"><a href=\"#减少Dom减少\" class=\"headerlink\" title=\"减少Dom减少\"></a>减少Dom减少</h5><pre><code>1.改变dom结构，对dom进行循环解决方案：较少dom元素的查询和修改，查询时赋值给局部变量，我个人理解就是将循环出来的变量赋值，然后用这个值去填入\n</code></pre><h5 id=\"使用json进行数据狡猾\"><a href=\"#使用json进行数据狡猾\" class=\"headerlink\" title=\"使用json进行数据狡猾\"></a>使用json进行数据狡猾</h5><pre><code>1.与xml相比json用压缩后文件比较小。json是比较好用。。。各种发ajax回来\n</code></pre><h5 id=\"高效使用HTML和css样式\"><a href=\"#高效使用HTML和css样式\" class=\"headerlink\" title=\"高效使用HTML和css样式\"></a>高效使用HTML和css样式</h5><pre><code>1.合理用html~怎么合理，感觉很抽象，就尽量遵守规范的用\n2.css的话选择器是从右到左解析..就是不要范二写div ul li a{}这种。。shability。。\n3.css选择符开销来算\n   -ID选择器   #box\n   -类选择器   .box\n   -标签       div\n   -伪类和伪元素 a:hover\n</code></pre><h5 id=\"使用cdn\"><a href=\"#使用cdn\" class=\"headerlink\" title=\"使用cdn\"></a>使用cdn</h5><pre><code>1.我们项目中用到蜻蜓，把合同文件什么的放到蜻蜓上面去。。那个原理艾玛有点不是很懂。。写出来感觉很复杂。。\n</code></pre><h5 id=\"css，js放在外部文件中引入，css放头，js放在尾部\"><a href=\"#css，js放在外部文件中引入，css放头，js放在尾部\" class=\"headerlink\" title=\"css，js放在外部文件中引入，css放头，js放在尾部\"></a>css，js放在外部文件中引入，css放头，js放在尾部</h5><pre><code>1. 易管理，易扩展，方便管理，重复利用\n2. js阻塞就是执行完才可以继续渲染页面，所以放在最后会比较好\n</code></pre><h5 id=\"精简css，js\"><a href=\"#精简css，js\" class=\"headerlink\" title=\"精简css，js\"></a>精简css，js</h5><pre><code>1.压缩这些文件(YUI Compressor)\n2.好奇，打包了以后不就压缩了嘛。。。。\n</code></pre><h5 id=\"压缩图片和使用图片Sprite技术\"><a href=\"#压缩图片和使用图片Sprite技术\" class=\"headerlink\" title=\"压缩图片和使用图片Sprite技术\"></a>压缩图片和使用图片Sprite技术</h5><pre><code>1.以前实习的时候告诉我，每张图片怎么样都不要超过200kb。。\n2.sprite技术就是一张图放很多，然后显示部分。。\n</code></pre><h5 id=\"注意cookie和大小和污染\"><a href=\"#注意cookie和大小和污染\" class=\"headerlink\" title=\"注意cookie和大小和污染\"></a>注意cookie和大小和污染</h5><pre><code>1.其实我不懂cookie。。但是就是不要太晚清除，也不要分分钟去清除。\n</code></pre>","excerpt":"减少http请求1.通过url向服务器建立连接，然后浏览器向服务器发送请求，服务器再返回响应的信息，浏览器收到信息以后，对数据执行 2.因为在请求里面会有很多的图片，文件等需要耗费时间加载，会耗性能 3.解决方式：合并图片(css sprites)，尽量减少js和css文件，图片较多的页面用lazyload技术进行优化(这个方法没试过。。) repaint(重绘)和reflow(重排)1.重绘一个元素的外观被改变，例如visibility，背景色等 2.重排是dom变化影响了元素的几何元素，宽高 解决方案：不要用style，加class名字，有动画效果用position设置，因为脱离文档流，就不会改变布局。。减少reflow","tags":[{"name":"前端基础","slug":"前端基础","permalink":"http://yoursite.com/tags/前端基础/"}]},{"title":"just want to say something","date":"2016-06-26T13:46:28.000Z","path":"2016/06/26/Blog-travel/","content":"<p>很清晰的记得去年的6月25日拿完毕业证，原来我已经毕业一整年了，很巧的是，明天是我24岁的阳历生日。<br>所以现在的我是毕业一整年，整整24周岁的我。<br>我还记得刚毕业找到工作的开心，我还记得被面试时候的蒙蔽，我还记得面完试，大汗淋漓，手机没有电，找不到回去的路的无奈。<br>原来已经一年了。<br><a id=\"more\"></a><br>不算实习，我做前端一年了。<br>时间过得真的好快，去年的一整个半年，疯狂的加班，学习，原来自己这么超能力。<br>想起，看不懂项目，看不懂文档，凌晨从公司出来，蹲在路边很想哭的感觉。<br>想起，终于看懂了，拍视频给别人看的幼稚。<br>分手，工作压力超级大，不知道自己是怎么撑过那段时光的，给自己点赞。<br>做了一年的前端，我原来也能对一件事情的热情持续那么久，作为一个女生，也从来没想过想转行，但是想过找一个代码写的很6的男朋友，一起装逼一起飞。。<br>特别感谢遇到的帮助过我的人，让我觉得，人生这么温暖，也特别感谢觉得我不行的人，因为我是傲娇到不能让别人说不好的人。<br>做前端是缘分，但是我很喜欢，在过去的22年都没有想过我竟然要做一个程序员。做了以后我竟然很喜欢。这是一种什么体验。。<br>弄出一个博客，记录一下，自己的成长，不是有人说，有时候发朋友圈也不是为了给别人看，也是为了给自己留下在什么时间段留下的记忆和记录一样。我希望自己可以坚持，<br>能认真做技术，认真做一个程序员，认真的做一个小巫女。</p>\n","excerpt":"很清晰的记得去年的6月25日拿完毕业证，原来我已经毕业一整年了，很巧的是，明天是我24岁的阳历生日。所以现在的我是毕业一整年，整整24周岁的我。我还记得刚毕业找到工作的开心，我还记得被面试时候的蒙蔽，我还记得面完试，大汗淋漓，手机没有电，找不到回去的路的无奈。原来已经一年了。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]